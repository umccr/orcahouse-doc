{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.9.2", "generated_at": "2025-02-24T08:34:25.658888Z", "invocation_id": "757125b4-3d56-4815-a53a-7daa5a745203", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-24T08:34:25.558795Z", "completed_at": "2025-02-24T08:34:25.561149Z"}, {"name": "execute", "started_at": "2025-02-24T08:34:25.561407Z", "completed_at": "2025-02-24T08:34:25.561415Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01110076904296875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.spreadsheet_library_tracking_metadata", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select * from \"orcavault\".\"tsa\".\"spreadsheet_library_tracking_metadata\"\n\n),\n\ncleaned as (\n\n    select\n        trim(regexp_replace(assay, E'[\\\\n\\\\r]+', '', 'g')) as assay,\n        trim(regexp_replace(comments, E'[\\\\n\\\\r]+', '', 'g')) as comments,\n        trim(regexp_replace(coverage, E'[\\\\n\\\\r]+', '', 'g')) as coverage,\n        trim(regexp_replace(experiment_id, E'[\\\\n\\\\r]+', '', 'g')) as experiment_id,\n        trim(regexp_replace(external_sample_id, E'[\\\\n\\\\r]+', '', 'g')) as external_sample_id,\n        trim(regexp_replace(external_subject_id, E'[\\\\n\\\\r]+', '', 'g')) as external_subject_id,\n        trim(regexp_replace(library_id, E'[\\\\n\\\\r]+', '', 'g')) as library_id,\n        trim(regexp_replace(override_cycles, E'[\\\\n\\\\r]+', '', 'g')) as override_cycles,\n        trim(regexp_replace(phenotype, E'[\\\\n\\\\r]+', '', 'g')) as phenotype,\n        trim(regexp_replace(project_name, E'[\\\\n\\\\r]+', '', 'g')) as project_name,\n        trim(regexp_replace(project_owner, E'[\\\\n\\\\r]+', '', 'g')) as project_owner,\n        trim(regexp_replace(qpcr_id, E'[\\\\n\\\\r]+', '', 'g')) as qpcr_id,\n        trim(regexp_replace(quality, E'[\\\\n\\\\r]+', '', 'g')) as quality,\n        trim(regexp_replace(run, E'[\\\\n\\\\r]+', '', 'g')) as run,\n        trim(regexp_replace(sample_id, E'[\\\\n\\\\r]+', '', 'g')) as sample_id,\n        trim(regexp_replace(sample_name, E'[\\\\n\\\\r]+', '', 'g')) as sample_name,\n        trim(regexp_replace(samplesheet_sample_id, E'[\\\\n\\\\r]+', '', 'g')) as samplesheet_sample_id,\n        trim(regexp_replace(source, E'[\\\\n\\\\r]+', '', 'g')) as source,\n        trim(regexp_replace(subject_id, E'[\\\\n\\\\r]+', '', 'g')) as subject_id,\n        trim(regexp_replace(truseq_index, E'[\\\\n\\\\r]+', '', 'g')) as truseq_index,\n        trim(regexp_replace(type, E'[\\\\n\\\\r]+', '', 'g')) as type,\n        trim(regexp_replace(workflow, E'[\\\\n\\\\r]+', '', 'g')) as workflow,\n        trim(regexp_replace(r_rna, E'[\\\\n\\\\r]+', '', 'g')) as r_rna,\n        trim(regexp_replace(study, E'[\\\\n\\\\r]+', '', 'g')) as study,\n        trim(regexp_replace(sheet_name, E'[\\\\n\\\\r]+', '', 'g')) as sheet_name\n    from\n        source\n    where\n        coalesce\n        (\n            nullif(assay, ''),\n            nullif(comments, ''),\n            nullif(coverage, ''),\n            nullif(experiment_id, ''),\n            nullif(external_sample_id, ''),\n            nullif(external_subject_id, ''),\n            nullif(library_id, ''),\n            nullif(override_cycles, ''),\n            nullif(phenotype, ''),\n            nullif(project_name, ''),\n            nullif(project_owner, ''),\n            nullif(qpcr_id, ''),\n            nullif(quality, ''),\n            nullif(run, ''),\n            nullif(sample_id, ''),\n            nullif(sample_name, ''),\n            nullif(samplesheet_sample_id, ''),\n            nullif(source, ''),\n            nullif(subject_id, ''),\n            nullif(truseq_index, ''),\n            nullif(type, ''),\n            nullif(workflow, ''),\n            nullif(r_rna, ''),\n            nullif(study, '')\n        ) is not null\n\n),\n\ndifferentiated as (\n\n    select\n        *\n    from\n        cleaned\n    \n    except\n    select\n        assay,\n        comments,\n        coverage,\n        experiment_id,\n        external_sample_id,\n        external_subject_id,\n        library_id,\n        override_cycles,\n        phenotype,\n        project_name,\n        project_owner,\n        qpcr_id,\n        quality,\n        run,\n        sample_id,\n        sample_name,\n        samplesheet_sample_id,\n        source,\n        subject_id,\n        truseq_index,\n        type,\n        workflow,\n        r_rna,\n        study,\n        sheet_name\n    from\n        \"orcavault\".\"psa\".\"spreadsheet_library_tracking_metadata\"\n    \n\n),\n\ntransformed as (\n\n    select\n        *,\n        cast('2025-02-24 08:34:25.121660+00:00' as timestamptz) as load_datetime,\n        (select 'UMCCR_Library_Tracking_MetaData') as record_source\n    from\n        differentiated\n\n),\n\nfinal as (\n\n    select * from transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"psa\".\"spreadsheet_library_tracking_metadata\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-24T08:34:25.550989Z", "completed_at": "2025-02-24T08:34:25.562076Z"}, {"name": "execute", "started_at": "2025-02-24T08:34:25.562526Z", "completed_at": "2025-02-24T08:34:25.562530Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012437105178833008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.spreadsheet_google_lims", "compiled": true, "compiled_code": "\n\nwith cutoff as (\n\n    select coalesce(max(load_datetime), '1900-01-01') as ldts from \"orcavault\".\"psa\".\"spreadsheet_google_lims\"\n\n),\n\nsource as (\n\n    select\n        *\n    from\n        \"orcavault\".\"tsa\".\"spreadsheet_google_lims\"\n\n    \n\n    where cast(\"timestamp\" as timestamptz) + time '11:00' > ( select ldts from cutoff )\n\n    \n\n),\n\ncleaned as (\n\n    select\n        trim(regexp_replace(illumina_id, E'[\\\\n\\\\r]+', '', 'g')) as illumina_id,\n        trim(regexp_replace(run, E'[\\\\n\\\\r]+', '', 'g')) as run,\n        trim(regexp_replace(\"timestamp\", E'[\\\\n\\\\r]+', '', 'g')) as \"timestamp\",\n        trim(regexp_replace(subject_id, E'[\\\\n\\\\r]+', '', 'g')) as subject_id,\n        trim(regexp_replace(sample_id, E'[\\\\n\\\\r]+', '', 'g')) as sample_id,\n        trim(regexp_replace(library_id, E'[\\\\n\\\\r]+', '', 'g')) as library_id,\n        trim(regexp_replace(external_subject_id, E'[\\\\n\\\\r]+', '', 'g')) as external_subject_id,\n        trim(regexp_replace(external_sample_id, E'[\\\\n\\\\r]+', '', 'g')) as external_sample_id,\n        trim(regexp_replace(external_library_id, E'[\\\\n\\\\r]+', '', 'g')) as external_library_id,\n        trim(regexp_replace(sample_name, E'[\\\\n\\\\r]+', '', 'g')) as sample_name,\n        trim(regexp_replace(project_owner, E'[\\\\n\\\\r]+', '', 'g')) as project_owner,\n        trim(regexp_replace(project_name, E'[\\\\n\\\\r]+', '', 'g')) as project_name,\n        trim(regexp_replace(project_custodian, E'[\\\\n\\\\r]+', '', 'g')) as project_custodian,\n        trim(regexp_replace(type, E'[\\\\n\\\\r]+', '', 'g')) as type,\n        trim(regexp_replace(assay, E'[\\\\n\\\\r]+', '', 'g')) as assay,\n        trim(regexp_replace(override_cycles, E'[\\\\n\\\\r]+', '', 'g')) as override_cycles,\n        trim(regexp_replace(phenotype, E'[\\\\n\\\\r]+', '', 'g')) as phenotype,\n        trim(regexp_replace(source, E'[\\\\n\\\\r]+', '', 'g')) as source,\n        trim(regexp_replace(quality, E'[\\\\n\\\\r]+', '', 'g')) as quality,\n        trim(regexp_replace(topup, E'[\\\\n\\\\r]+', '', 'g')) as topup,\n        trim(regexp_replace(secondary_analysis, E'[\\\\n\\\\r]+', '', 'g')) as secondary_analysis,\n        trim(regexp_replace(workflow, E'[\\\\n\\\\r]+', '', 'g')) as workflow,\n        trim(regexp_replace(tags, E'[\\\\n\\\\r]+', '', 'g')) as tags,\n        trim(regexp_replace(fastq, E'[\\\\n\\\\r]+', '', 'g')) as fastq,\n        trim(regexp_replace(number_fastqs, E'[\\\\n\\\\r]+', '', 'g')) as number_fastqs,\n        trim(regexp_replace(results, E'[\\\\n\\\\r]+', '', 'g')) as results,\n        trim(regexp_replace(trello, E'[\\\\n\\\\r]+', '', 'g')) as trello,\n        trim(regexp_replace(notes, E'[\\\\n\\\\r]+', '', 'g')) as notes,\n        trim(regexp_replace(todo, E'[\\\\n\\\\r]+', '', 'g')) as todo,\n        trim(regexp_replace(sheet_name, E'[\\\\n\\\\r]+', '', 'g')) as sheet_name\n    from\n        source\n    where\n        coalesce\n        (\n            nullif(illumina_id, ''),\n            nullif(run, ''),\n            nullif(\"timestamp\", ''),\n            nullif(subject_id, ''),\n            nullif(sample_id, ''),\n            nullif(library_id, ''),\n            nullif(external_subject_id, ''),\n            nullif(external_sample_id, ''),\n            nullif(external_library_id, ''),\n            nullif(sample_name, ''),\n            nullif(project_owner, ''),\n            nullif(project_name, ''),\n            nullif(project_custodian, ''),\n            nullif(type, ''),\n            nullif(assay, ''),\n            nullif(override_cycles, ''),\n            nullif(phenotype, ''),\n            nullif(source, ''),\n            nullif(quality, ''),\n            nullif(topup, ''),\n            nullif(secondary_analysis, ''),\n            nullif(workflow, ''),\n            nullif(tags, ''),\n            nullif(fastq, ''),\n            nullif(number_fastqs, ''),\n            nullif(results, ''),\n            nullif(trello, ''),\n            nullif(notes, ''),\n            nullif(todo, ''),\n            nullif(sheet_name, '')\n        ) is not null\n\n),\n\ntransformed as (\n\n    select\n        illumina_id,\n        cast(run as integer),\n        cast(\"timestamp\" as date) as \"timestamp\",\n        subject_id,\n        sample_id,\n        library_id,\n        external_subject_id,\n        external_sample_id,\n        external_library_id,\n        sample_name,\n        project_owner,\n        project_name,\n        project_custodian,\n        type,\n        assay,\n        override_cycles,\n        phenotype,\n        source,\n        quality,\n        topup,\n        secondary_analysis,\n        workflow,\n        tags,\n        fastq,\n        number_fastqs,\n        results,\n        trello,\n        notes,\n        todo,\n        sheet_name,\n        cast(\"timestamp\" as timestamptz) + time '11:00' as load_datetime,\n        (select 'Google_LIMS') as record_source\n    from\n        cleaned\n\n),\n\nfinal as (\n\n    select * from transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"psa\".\"spreadsheet_google_lims\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-24T08:34:25.563067Z", "completed_at": "2025-02-24T08:34:25.566563Z"}, {"name": "execute", "started_at": "2025-02-24T08:34:25.567190Z", "completed_at": "2025-02-24T08:34:25.567194Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.00495600700378418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.hub_experiment", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select experiment_id from \"orcavault\".\"ods\".\"data_portal_labmetadata\"\n    union\n    select experiment_id from \"orcavault\".\"psa\".\"spreadsheet_library_tracking_metadata\"\n\n),\n\ncleaned as (\n\n    select\n        distinct trim(experiment_id) as experiment_id\n    from\n        source\n    where\n        experiment_id is not null and experiment_id <> ''\n\n),\n\ndifferentiated as (\n\n    select experiment_id from cleaned\n    \n    except\n    select experiment_id from \"orcavault\".\"raw\".\"hub_experiment\"\n    \n\n),\n\ntransformed as (\n\n    select\n        encode(sha256(cast(experiment_id as bytea)), 'hex') as experiment_hk,\n        experiment_id,\n        cast('2025-02-24 08:34:25.121660+00:00' as timestamptz) as load_datetime,\n        (select 'lab') as record_source\n    from\n        differentiated\n\n),\n\nfinal as (\n\n    select\n        cast(experiment_hk as char(64)) as experiment_hk,\n        cast(experiment_id as varchar(255)) as experiment_id,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"raw\".\"hub_experiment\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-24T08:34:25.572242Z", "completed_at": "2025-02-24T08:34:25.579427Z"}, {"name": "execute", "started_at": "2025-02-24T08:34:25.579926Z", "completed_at": "2025-02-24T08:34:25.579929Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.013626813888549805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.hub_contact", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select project_owner as contact_id from \"orcavault\".\"ods\".\"data_portal_labmetadata\"\n    union\n    select project_owner as contact_id from \"orcavault\".\"ods\".\"data_portal_limsrow\"\n    union\n    select contact_id from \"orcavault\".\"ods\".\"metadata_manager_contact\"\n    union\n    select project_owner as contact_id from \"orcavault\".\"psa\".\"spreadsheet_library_tracking_metadata\"\n    union\n    select project_owner as contact_id from \"orcavault\".\"psa\".\"spreadsheet_google_lims\"\n\n),\n\ncleaned as (\n\n    select * from source where contact_id is not null and contact_id <> ''\n\n),\n\ndifferentiated as (\n\n    select contact_id from cleaned\n    \n    except\n    select contact_id from \"orcavault\".\"raw\".\"hub_contact\"\n    \n\n),\n\ntransformed as (\n\n    select\n        encode(sha256(cast(contact_id as bytea)), 'hex') as contact_hk,\n        contact_id,\n        cast('2025-02-24 08:34:25.121660+00:00' as timestamptz) as load_datetime,\n        (select 'lab') as record_source\n    from\n        differentiated\n\n),\n\nfinal as (\n\n    select\n        cast(contact_hk as char(64)) as contact_hk,\n        cast(contact_id as varchar(255)) as contact_id,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"raw\".\"hub_contact\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-24T08:34:25.567456Z", "completed_at": "2025-02-24T08:34:25.579598Z"}, {"name": "execute", "started_at": "2025-02-24T08:34:25.580218Z", "completed_at": "2025-02-24T08:34:25.580221Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.014312267303466797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.hub_external_sample", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select external_sample_id from \"orcavault\".\"ods\".\"data_portal_labmetadata\"\n    union\n    select external_sample_id from \"orcavault\".\"ods\".\"data_portal_limsrow\"\n    union\n    select external_sample_id from \"orcavault\".\"ods\".\"metadata_manager_sample\"\n    union\n    select external_sample_id from \"orcavault\".\"psa\".\"spreadsheet_library_tracking_metadata\"\n    union\n    select external_sample_id from \"orcavault\".\"psa\".\"spreadsheet_google_lims\"\n\n),\n\ncleaned as (\n\n    select * from source where external_sample_id is not null and external_sample_id <> ''\n\n),\n\ndifferentiated as (\n\n    select external_sample_id from cleaned\n    \n    except\n    select external_sample_id from \"orcavault\".\"raw\".\"hub_external_sample\"\n    \n\n),\n\ntransformed as (\n\n    select\n        encode(sha256(cast(external_sample_id as bytea)), 'hex') as external_sample_hk,\n        external_sample_id,\n        cast('2025-02-24 08:34:25.121660+00:00' as timestamptz) as load_datetime,\n        (select 'lab') as record_source\n    from\n        differentiated\n\n),\n\nfinal as (\n\n    select\n        cast(external_sample_hk as char(64)) as external_sample_hk,\n        cast(external_sample_id as varchar(255)) as external_sample_id,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"raw\".\"hub_external_sample\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-24T08:34:25.569763Z", "completed_at": "2025-02-24T08:34:25.579781Z"}, {"name": "execute", "started_at": "2025-02-24T08:34:25.580480Z", "completed_at": "2025-02-24T08:34:25.580482Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014369010925292969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.hub_external_subject", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select external_subject_id from \"orcavault\".\"ods\".\"data_portal_labmetadata\"\n    union\n    select external_subject_id from \"orcavault\".\"ods\".\"data_portal_limsrow\"\n    union\n    select subject_id as external_subject_id from \"orcavault\".\"ods\".\"metadata_manager_subject\"\n    union\n    select external_subject_id from \"orcavault\".\"psa\".\"spreadsheet_library_tracking_metadata\"\n    union\n    select external_subject_id from \"orcavault\".\"psa\".\"spreadsheet_google_lims\"\n\n),\n\ncleaned as (\n\n    select * from source where external_subject_id is not null and external_subject_id <> ''\n\n),\n\ndifferentiated as (\n\n    select external_subject_id from cleaned\n    \n    except\n    select external_subject_id from \"orcavault\".\"raw\".\"hub_external_subject\"\n    \n\n),\n\ntransformed as (\n\n    select\n        encode(sha256(cast(external_subject_id as bytea)), 'hex') as external_subject_hk,\n        external_subject_id,\n        cast('2025-02-24 08:34:25.121660+00:00' as timestamptz) as load_datetime,\n        (select 'lab') as record_source\n    from\n        differentiated\n\n),\n\nfinal as (\n\n    select\n        cast(external_subject_hk as char(64)) as external_subject_hk,\n        cast(external_subject_id as varchar(255)) as external_subject_id,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"raw\".\"hub_external_subject\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-24T08:34:25.575101Z", "completed_at": "2025-02-24T08:34:25.580742Z"}, {"name": "execute", "started_at": "2025-02-24T08:34:25.581461Z", "completed_at": "2025-02-24T08:34:25.581463Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.006807088851928711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.hub_internal_subject", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select subject_id as internal_subject_id from \"orcavault\".\"ods\".\"data_portal_labmetadata\"\n    union\n    select subject_id as internal_subject_id from \"orcavault\".\"ods\".\"data_portal_limsrow\"\n    union\n    select individual_id as internal_subject_id from \"orcavault\".\"ods\".\"metadata_manager_individual\"\n    union\n    select subject_id as internal_subject_id from \"orcavault\".\"psa\".\"spreadsheet_library_tracking_metadata\"\n    union\n    select subject_id as internal_subject_id from \"orcavault\".\"psa\".\"spreadsheet_google_lims\"\n\n),\n\ncleaned as (\n\n    select * from source where internal_subject_id is not null and internal_subject_id <> ''\n\n),\n\ndifferentiated as (\n\n    select internal_subject_id from cleaned\n    \n    except\n    select internal_subject_id from \"orcavault\".\"raw\".\"hub_internal_subject\"\n    \n\n),\n\ntransformed as (\n\n    select\n        encode(sha256(cast(internal_subject_id as bytea)), 'hex') as internal_subject_hk,\n        internal_subject_id,\n        cast('2025-02-24 08:34:25.121660+00:00' as timestamptz) as load_datetime,\n        (select 'lab') as record_source\n    from\n        differentiated\n\n),\n\nfinal as (\n\n    select\n        cast(internal_subject_hk as char(64)) as internal_subject_hk,\n        cast(internal_subject_id as varchar(255)) as internal_subject_id,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"raw\".\"hub_internal_subject\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-24T08:34:25.583068Z", "completed_at": "2025-02-24T08:34:25.592341Z"}, {"name": "execute", "started_at": "2025-02-24T08:34:25.592853Z", "completed_at": "2025-02-24T08:34:25.592856Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011183023452758789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.hub_library", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select library_id from \"orcavault\".\"ods\".\"data_portal_labmetadata\"\n    union\n    select library_id from \"orcavault\".\"ods\".\"data_portal_limsrow\"\n    union\n    select library_id from \"orcavault\".\"ods\".\"metadata_manager_library\"\n    union\n    select library_id from \"orcavault\".\"psa\".\"spreadsheet_library_tracking_metadata\"\n    union\n    select library_id from \"orcavault\".\"psa\".\"spreadsheet_google_lims\"\n\n),\n\ncleaned as (\n\n    select * from source where library_id is not null and library_id <> ''\n\n),\n\ndifferentiated as (\n\n    select library_id from cleaned\n    \n    except\n    select library_id from \"orcavault\".\"raw\".\"hub_library\"\n    \n\n),\n\ntransformed as (\n\n    select\n        encode(sha256(cast(library_id as bytea)), 'hex') as library_hk,\n        library_id,\n        cast('2025-02-24 08:34:25.121660+00:00' as timestamptz) as load_datetime,\n        (select 'lab') as record_source\n    from\n        differentiated\n\n),\n\nfinal as (\n\n    select\n        cast(library_hk as char(64)) as library_hk,\n        cast(library_id as varchar(255)) as library_id,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"raw\".\"hub_library\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-24T08:34:25.587348Z", "completed_at": "2025-02-24T08:34:25.592513Z"}, {"name": "execute", "started_at": "2025-02-24T08:34:25.593162Z", "completed_at": "2025-02-24T08:34:25.593166Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011139154434204102, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.hub_sample", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select sample_id from \"orcavault\".\"ods\".\"data_portal_labmetadata\"\n    union\n    select sample_id from \"orcavault\".\"ods\".\"data_portal_limsrow\"\n    union\n    select sample_id from \"orcavault\".\"ods\".\"metadata_manager_sample\"\n    union\n    select sample_id from \"orcavault\".\"psa\".\"spreadsheet_library_tracking_metadata\"\n    union\n    select sample_id from \"orcavault\".\"psa\".\"spreadsheet_google_lims\"\n\n),\n\ncleaned as (\n\n    select * from source where sample_id is not null and sample_id <> ''\n\n),\n\ndifferentiated as (\n\n    select sample_id from cleaned\n    \n    except\n    select sample_id from \"orcavault\".\"raw\".\"hub_sample\"\n    \n\n),\n\ntransformed as (\n\n    select\n        encode(sha256(cast(sample_id as bytea)), 'hex') as sample_hk,\n        sample_id,\n        cast('2025-02-24 08:34:25.121660+00:00' as timestamptz) as load_datetime,\n        (select 'lab') as record_source\n    from\n        differentiated\n\n),\n\nfinal as (\n\n    select\n        cast(sample_hk as char(64)) as sample_hk,\n        cast(sample_id as varchar(255)) as sample_id,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"raw\".\"hub_sample\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-24T08:34:25.585234Z", "completed_at": "2025-02-24T08:34:25.592682Z"}, {"name": "execute", "started_at": "2025-02-24T08:34:25.593589Z", "completed_at": "2025-02-24T08:34:25.593591Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011742115020751953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.hub_project", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select project_name as project_id from \"orcavault\".\"ods\".\"data_portal_labmetadata\"\n    union\n    select project_name as project_id from \"orcavault\".\"ods\".\"data_portal_limsrow\"\n    union\n    select project_id from \"orcavault\".\"ods\".\"metadata_manager_project\"\n    union\n    select project_name as project_id from \"orcavault\".\"psa\".\"spreadsheet_library_tracking_metadata\"\n    union\n    select project_name as project_id from \"orcavault\".\"psa\".\"spreadsheet_google_lims\"\n\n),\n\ncleaned as (\n\n    select * from source where project_id is not null and project_id <> ''\n\n),\n\ndifferentiated as (\n\n    select project_id from cleaned\n    \n    except\n    select project_id from \"orcavault\".\"raw\".\"hub_project\"\n    \n\n),\n\ntransformed as (\n\n    select\n        encode(sha256(cast(project_id as bytea)), 'hex') as project_hk,\n        project_id,\n        cast('2025-02-24 08:34:25.121660+00:00' as timestamptz) as load_datetime,\n        (select 'lab') as record_source\n    from\n        differentiated\n\n),\n\nfinal as (\n\n    select\n        cast(project_hk as char(64)) as project_hk,\n        cast(project_id as varchar(255)) as project_id,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"raw\".\"hub_project\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-24T08:34:25.589999Z", "completed_at": "2025-02-24T08:34:25.593450Z"}, {"name": "execute", "started_at": "2025-02-24T08:34:25.594222Z", "completed_at": "2025-02-24T08:34:25.594225Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011363029479980469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.hub_sequencing_run", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select instrument_run_id as sequencing_run_id from \"orcavault\".\"ods\".\"data_portal_libraryrun\"\n    union\n    select instrument_run_id as sequencing_run_id from \"orcavault\".\"ods\".\"data_portal_sequence\"\n    union\n    select instrument_run_id as sequencing_run_id from \"orcavault\".\"ods\".\"data_portal_sequencerun\"\n    union\n    select instrument_run_id as sequencing_run_id from \"orcavault\".\"ods\".\"sequence_run_manager_sequence\"\n    union\n    select illumina_id as sequencing_run_id from \"orcavault\".\"ods\".\"data_portal_limsrow\"\n    union\n    select illumina_id as sequencing_run_id from \"orcavault\".\"psa\".\"spreadsheet_google_lims\"\n\n),\n\ncleaned as (\n\n    select * from source where sequencing_run_id is not null and sequencing_run_id <> ''\n\n),\n\ndifferentiated as (\n\n    select sequencing_run_id from cleaned\n    \n    except\n    select sequencing_run_id from \"orcavault\".\"raw\".\"hub_sequencing_run\"\n    \n\n),\n\ntransformed as (\n\n    select\n        encode(sha256(cast(sequencing_run_id as bytea)), 'hex') as sequencing_run_hk,\n        sequencing_run_id,\n        cast('2025-02-24 08:34:25.121660+00:00' as timestamptz) as load_datetime,\n        (select 'lab') as record_source\n    from\n        differentiated\n\n),\n\nfinal as (\n\n    select\n        cast(sequencing_run_hk as char(64)) as sequencing_run_hk,\n        cast(sequencing_run_id as varchar(255)) as sequencing_run_id,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"raw\".\"hub_sequencing_run\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-24T08:34:25.599170Z", "completed_at": "2025-02-24T08:34:25.605586Z"}, {"name": "execute", "started_at": "2025-02-24T08:34:25.605949Z", "completed_at": "2025-02-24T08:34:25.605953Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011138677597045898, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.sat_subject_mm", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select\n        subject_id as external_subject_id,\n        orcabus_id\n    from\n        \"orcavault\".\"ods\".\"metadata_manager_subject\"\n\n),\n\ncleaned as (\n\n    select\n        trim(regexp_replace(external_subject_id, E'[\\\\n\\\\r]+', '', 'g')) as external_subject_id,\n        trim(regexp_replace(orcabus_id, E'[\\\\n\\\\r]+', '', 'g')) as orcabus_id\n    from\n        source\n\n),\n\nencoded as (\n\n    select\n        encode(sha256(cast(external_subject_id as bytea)), 'hex') as external_subject_hk,\n        encode(sha256(concat(orcabus_id)::bytea), 'hex') as hash_diff,\n        orcabus_id\n    from\n        cleaned\n\n),\n\ndifferentiated as (\n\n    select\n        external_subject_hk,\n        hash_diff\n    from\n        encoded\n    \n    except\n    select\n        external_subject_hk,\n        hash_diff\n    from\n        \"orcavault\".\"raw\".\"sat_subject_mm\"\n    \n\n),\n\ntransformed as (\n\n    select\n        external_subject_hk,\n        cast('2025-02-24 08:34:25.121660+00:00' as timestamptz) as load_datetime,\n        (select 'metadata_manager_subject') as record_source,\n        hash_diff,\n        orcabus_id\n    from\n        encoded\n    \n    where\n        external_subject_hk in (select external_subject_hk from differentiated)\n    \n\n),\n\nfinal as (\n\n    select\n        cast(external_subject_hk as char(64)) as external_subject_hk,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source,\n        cast(hash_diff as char(64)) as hash_diff,\n        cast(orcabus_id as varchar(255)) as orcabus_id\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"raw\".\"sat_subject_mm\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-24T08:34:25.595929Z", "completed_at": "2025-02-24T08:34:25.605762Z"}, {"name": "execute", "started_at": "2025-02-24T08:34:25.606269Z", "completed_at": "2025-02-24T08:34:25.606272Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011625051498413086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.sat_contact_mm", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select\n        *\n    from\n        \"orcavault\".\"ods\".\"metadata_manager_contact\"\n\n),\n\ncleaned as (\n\n    select\n        trim(regexp_replace(contact_id, E'[\\\\n\\\\r]+', '', 'g')) as contact_id,\n        trim(regexp_replace(orcabus_id, E'[\\\\n\\\\r]+', '', 'g')) as orcabus_id,\n        trim(regexp_replace(name, E'[\\\\n\\\\r]+', '', 'g')) as name,\n        trim(regexp_replace(description, E'[\\\\n\\\\r]+', '', 'g')) as description,\n        trim(regexp_replace(email, E'[\\\\n\\\\r]+', '', 'g')) as email\n    from\n        source\n\n),\n\nencoded as (\n\n    select\n        encode(sha256(cast(contact_id as bytea)), 'hex') as contact_hk,\n        encode(sha256(concat(orcabus_id, name, description, email)::bytea), 'hex') as hash_diff,\n        orcabus_id,\n        name,\n        description,\n        email\n    from\n        cleaned\n\n),\n\ndifferentiated as (\n\n    select\n        contact_hk,\n        hash_diff\n    from\n        encoded\n    \n    except\n    select\n        contact_hk,\n        hash_diff\n    from\n        \"orcavault\".\"raw\".\"sat_contact_mm\"\n    \n\n),\n\ntransformed as (\n\n    select\n        contact_hk,\n        cast('2025-02-24 08:34:25.121660+00:00' as timestamptz) as load_datetime,\n        (select 'metadata_manager_contact') as record_source,\n        hash_diff,\n        orcabus_id,\n        name,\n        description,\n        email\n    from\n        encoded\n    \n    where\n        contact_hk in (select contact_hk from differentiated)\n    \n\n),\n\nfinal as (\n\n    select\n        cast(contact_hk as char(64)) as contact_hk,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source,\n        cast(hash_diff as char(64)) as hash_diff,\n        cast(orcabus_id as varchar(255)) as orcabus_id,\n        cast(name as varchar(255)) as name,\n        cast(description as varchar(255)) as description,\n        cast(email as varchar(255)) as email\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"raw\".\"sat_contact_mm\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-24T08:34:25.601115Z", "completed_at": "2025-02-24T08:34:25.606542Z"}, {"name": "execute", "started_at": "2025-02-24T08:34:25.607195Z", "completed_at": "2025-02-24T08:34:25.607198Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.012054681777954102, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.link_internal_to_external_subject", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select subject_id as internal_subject_id, external_subject_id from \"orcavault\".\"ods\".\"data_portal_labmetadata\"\n    union\n    select subject_id as internal_subject_id, external_subject_id from \"orcavault\".\"ods\".\"data_portal_limsrow\"\n    union\n    select idv.individual_id as internal_subject_id, sbj.subject_id as external_subject_id from \"orcavault\".\"ods\".\"metadata_manager_subject\" as sbj\n        join \"orcavault\".\"ods\".\"metadata_manager_subjectindividuallink\" as lnk on lnk.subject_orcabus_id = sbj.orcabus_id\n        join \"orcavault\".\"ods\".\"metadata_manager_individual\" as idv on lnk.individual_orcabus_id = idv.orcabus_id\n    union\n    select subject_id as internal_subject_id, external_subject_id from \"orcavault\".\"psa\".\"spreadsheet_library_tracking_metadata\"\n    union\n    select subject_id as internal_subject_id, external_subject_id from \"orcavault\".\"psa\".\"spreadsheet_google_lims\"\n\n),\n\ncleaned as (\n\n    select\n        distinct internal_subject_id, trim(external_subject_id) as external_subject_id\n    from\n        source\n    where\n        (internal_subject_id is not null and internal_subject_id <> '') and\n        (external_subject_id is not null and external_subject_id <> '')\n\n),\n\ndifferentiated as (\n\n    select\n        encode(sha256(cast(external_subject_id as bytea)), 'hex') as external_subject_hk,\n        encode(sha256(cast(internal_subject_id as bytea)), 'hex') as internal_subject_hk\n    from\n        cleaned\n    \n    except\n    select\n        external_subject_hk,\n        internal_subject_hk\n    from\n        \"orcavault\".\"raw\".\"link_internal_to_external_subject\"\n    \n\n),\n\ntransformed as (\n\n    select\n        external_subject_hk,\n        internal_subject_hk,\n        cast('2025-02-24 08:34:25.121660+00:00' as timestamptz) as load_datetime,\n        (select 'lab') as record_source\n    from\n        differentiated\n\n),\n\nfinal as (\n\n    select\n        cast(encode(sha256(concat(external_subject_hk, internal_subject_hk)::bytea), 'hex') as char(64)) as internal_external_subject_hk,\n        cast(external_subject_hk as char(64)) as external_subject_hk,\n        cast(internal_subject_hk as char(64)) as internal_subject_hk,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"raw\".\"link_internal_to_external_subject\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-24T08:34:25.603699Z", "completed_at": "2025-02-24T08:34:25.606885Z"}, {"name": "execute", "started_at": "2025-02-24T08:34:25.607618Z", "completed_at": "2025-02-24T08:34:25.607620Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.012021064758300781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.sat_individual_mm", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select\n        individual_id as internal_subject_id,\n        orcabus_id,\n        source\n    from\n        \"orcavault\".\"ods\".\"metadata_manager_individual\"\n\n),\n\ncleaned as (\n\n    select\n        trim(regexp_replace(internal_subject_id, E'[\\\\n\\\\r]+', '', 'g')) as internal_subject_id,\n        trim(regexp_replace(orcabus_id, E'[\\\\n\\\\r]+', '', 'g')) as orcabus_id,\n        trim(regexp_replace(source, E'[\\\\n\\\\r]+', '', 'g')) as source\n    from\n        source\n\n),\n\nencoded as (\n\n    select\n        encode(sha256(cast(internal_subject_id as bytea)), 'hex') as internal_subject_hk,\n        encode(sha256(concat(orcabus_id, source)::bytea), 'hex') as hash_diff,\n        orcabus_id,\n        source\n    from\n        cleaned\n\n),\n\ndifferentiated as (\n\n    select\n        internal_subject_hk,\n        hash_diff\n    from\n        encoded\n    \n    except\n    select\n        internal_subject_hk,\n        hash_diff\n    from\n        \"orcavault\".\"raw\".\"sat_individual_mm\"\n    \n\n),\n\ntransformed as (\n\n    select\n        internal_subject_hk,\n        cast('2025-02-24 08:34:25.121660+00:00' as timestamptz) as load_datetime,\n        (select 'metadata_manager_individual') as record_source,\n        hash_diff,\n        orcabus_id,\n        source\n    from\n        encoded\n    \n    where\n        internal_subject_hk in (select internal_subject_hk from differentiated)\n    \n\n),\n\nfinal as (\n\n    select\n        cast(internal_subject_hk as char(64)) as internal_subject_hk,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source,\n        cast(hash_diff as char(64)) as hash_diff,\n        cast(orcabus_id as varchar(255)) as orcabus_id,\n        cast(source as varchar(255)) as source\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"raw\".\"sat_individual_mm\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-24T08:34:25.608765Z", "completed_at": "2025-02-24T08:34:25.615772Z"}, {"name": "execute", "started_at": "2025-02-24T08:34:25.618643Z", "completed_at": "2025-02-24T08:34:25.618646Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011226177215576172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.link_library_experiment", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select library_id, experiment_id from \"orcavault\".\"ods\".\"data_portal_labmetadata\"\n    union\n    select library_id, experiment_id from \"orcavault\".\"psa\".\"spreadsheet_library_tracking_metadata\"\n\n),\n\ncleaned as (\n\n    select\n        distinct library_id, experiment_id\n    from\n        source\n    where\n        (library_id is not null and library_id <> '') and\n        (experiment_id is not null and experiment_id <> '')\n\n),\n\ndifferentiated as (\n\n    select\n        encode(sha256(cast(experiment_id as bytea)), 'hex') as experiment_hk,\n        encode(sha256(cast(library_id as bytea)), 'hex') as library_hk\n    from\n        cleaned\n    \n    except\n    select\n        experiment_hk,\n        library_hk\n    from\n        \"orcavault\".\"raw\".\"link_library_experiment\"\n    \n\n),\n\ntransformed as (\n\n    select\n        experiment_hk,\n        library_hk,\n        cast('2025-02-24 08:34:25.121660+00:00' as timestamptz) as load_datetime,\n        (select 'lab') as record_source\n    from\n        differentiated\n\n),\n\nfinal as (\n\n    select\n        cast(encode(sha256(concat(experiment_hk, library_hk)::bytea), 'hex') as char(64)) as library_experiment_hk,\n        cast(experiment_hk as char(64)) as experiment_hk,\n        cast(library_hk as char(64)) as library_hk,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"raw\".\"link_library_experiment\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-24T08:34:25.610711Z", "completed_at": "2025-02-24T08:34:25.618481Z"}, {"name": "execute", "started_at": "2025-02-24T08:34:25.618976Z", "completed_at": "2025-02-24T08:34:25.618979Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011155843734741211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.link_library_external_sample", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select library_id, external_sample_id from \"orcavault\".\"ods\".\"data_portal_labmetadata\"\n    union\n    select library_id, external_sample_id from \"orcavault\".\"ods\".\"data_portal_limsrow\"\n    union\n    select lib.library_id as library_id, smp.external_sample_id as external_sample_id from \"orcavault\".\"ods\".\"metadata_manager_library\" as lib\n        join \"orcavault\".\"ods\".\"metadata_manager_sample\" as smp on smp.orcabus_id = lib.sample_orcabus_id\n    union\n    select library_id, external_sample_id from \"orcavault\".\"psa\".\"spreadsheet_library_tracking_metadata\"\n    union\n    select library_id, external_sample_id from \"orcavault\".\"psa\".\"spreadsheet_google_lims\"\n\n),\n\ncleaned as (\n\n    select\n        distinct library_id, trim(external_sample_id) as external_sample_id\n    from\n        source\n    where\n        (library_id is not null and library_id <> '') and\n        (external_sample_id is not null and external_sample_id <> '')\n\n),\n\ndifferentiated as (\n\n    select\n        encode(sha256(cast(external_sample_id as bytea)), 'hex') as external_sample_hk,\n        encode(sha256(cast(library_id as bytea)), 'hex') as library_hk\n    from\n        cleaned\n    \n    except\n    select\n        external_sample_hk,\n        library_hk\n    from\n        \"orcavault\".\"raw\".\"link_library_external_sample\"\n    \n\n),\n\ntransformed as (\n\n    select\n        external_sample_hk,\n        library_hk,\n        cast('2025-02-24 08:34:25.121660+00:00' as timestamptz) as load_datetime,\n        (select 'lab') as record_source\n    from\n        differentiated\n\n),\n\nfinal as (\n\n    select\n        cast(encode(sha256(concat(external_sample_hk, library_hk)::bytea), 'hex') as char(64)) as library_external_sample_hk,\n        cast(external_sample_hk as char(64)) as external_sample_hk,\n        cast(library_hk as char(64)) as library_hk,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"raw\".\"link_library_external_sample\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-24T08:34:25.613590Z", "completed_at": "2025-02-24T08:34:25.623829Z"}, {"name": "execute", "started_at": "2025-02-24T08:34:25.624179Z", "completed_at": "2025-02-24T08:34:25.624183Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.015616178512573242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.link_library_external_subject", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select library_id, external_subject_id from \"orcavault\".\"ods\".\"data_portal_labmetadata\"\n    union\n    select library_id, external_subject_id from \"orcavault\".\"ods\".\"data_portal_limsrow\"\n    union\n    select lib.library_id as library_id, sbj.subject_id as external_subject_id from \"orcavault\".\"ods\".\"metadata_manager_library\" as lib\n        join \"orcavault\".\"ods\".\"metadata_manager_subject\" as sbj on sbj.orcabus_id = lib.subject_orcabus_id\n    union\n    select library_id, external_subject_id from \"orcavault\".\"psa\".\"spreadsheet_library_tracking_metadata\"\n    union\n    select library_id, external_subject_id from \"orcavault\".\"psa\".\"spreadsheet_google_lims\"\n\n),\n\ncleaned as (\n\n    select\n        distinct library_id, trim(external_subject_id) as external_subject_id\n    from\n        source\n    where\n        (library_id is not null and library_id <> '') and\n        (external_subject_id is not null and external_subject_id <> '')\n\n),\n\ndifferentiated as (\n\n    select\n        encode(sha256(cast(external_subject_id as bytea)), 'hex') as external_subject_hk,\n        encode(sha256(cast(library_id as bytea)), 'hex') as library_hk\n    from\n        cleaned\n    \n    except\n    select\n        external_subject_hk,\n        library_hk\n    from\n        \"orcavault\".\"raw\".\"link_library_external_subject\"\n    \n\n),\n\ntransformed as (\n\n    select\n        external_subject_hk,\n        library_hk,\n        cast('2025-02-24 08:34:25.121660+00:00' as timestamptz) as load_datetime,\n        (select 'lab') as record_source\n    from\n        differentiated\n\n),\n\nfinal as (\n\n    select\n        cast(encode(sha256(concat(external_subject_hk, library_hk)::bytea), 'hex') as char(64)) as library_external_subject_hk,\n        cast(external_subject_hk as char(64)) as external_subject_hk,\n        cast(library_hk as char(64)) as library_hk,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"raw\".\"link_library_external_subject\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-24T08:34:25.615944Z", "completed_at": "2025-02-24T08:34:25.624002Z"}, {"name": "execute", "started_at": "2025-02-24T08:34:25.624482Z", "completed_at": "2025-02-24T08:34:25.624485Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.013994932174682617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.link_library_internal_subject", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select library_id, subject_id as internal_subject_id from \"orcavault\".\"ods\".\"data_portal_labmetadata\"\n    union\n    select library_id, subject_id as internal_subject_id from \"orcavault\".\"ods\".\"data_portal_limsrow\"\n    union\n    select lib.library_id as library_id, idv.individual_id as internal_subject_id from \"orcavault\".\"ods\".\"metadata_manager_library\" as lib\n        join \"orcavault\".\"ods\".\"metadata_manager_subject\" as sbj on sbj.orcabus_id = lib.subject_orcabus_id\n        join \"orcavault\".\"ods\".\"metadata_manager_subjectindividuallink\" as lnk on lnk.subject_orcabus_id = sbj.orcabus_id\n        join \"orcavault\".\"ods\".\"metadata_manager_individual\" as idv on idv.orcabus_id = lnk.individual_orcabus_id\n    union\n    select library_id, subject_id as internal_subject_id from \"orcavault\".\"psa\".\"spreadsheet_library_tracking_metadata\"\n    union\n    select library_id, subject_id as internal_subject_id from \"orcavault\".\"psa\".\"spreadsheet_google_lims\"\n\n),\n\ncleaned as (\n\n    select\n        distinct library_id, internal_subject_id\n    from\n        source\n    where\n        (library_id is not null and library_id <> '') and\n        (internal_subject_id is not null and internal_subject_id <> '')\n\n),\n\ndifferentiated as (\n\n    select\n        encode(sha256(cast(internal_subject_id as bytea)), 'hex') as internal_subject_hk,\n        encode(sha256(cast(library_id as bytea)), 'hex') as library_hk\n    from\n        cleaned\n    \n    except\n    select\n        internal_subject_hk,\n        library_hk\n    from\n        \"orcavault\".\"raw\".\"link_library_internal_subject\"\n    \n\n),\n\ntransformed as (\n\n    select\n        internal_subject_hk,\n        library_hk,\n        cast('2025-02-24 08:34:25.121660+00:00' as timestamptz) as load_datetime,\n        (select 'lab') as record_source\n    from\n        differentiated\n\n),\n\nfinal as (\n\n    select\n        cast(encode(sha256(concat(internal_subject_hk, library_hk)::bytea), 'hex') as char(64)) as library_internal_subject_hk,\n        cast(internal_subject_hk as char(64)) as internal_subject_hk,\n        cast(library_hk as char(64)) as library_hk,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"raw\".\"link_library_internal_subject\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-24T08:34:25.620234Z", "completed_at": "2025-02-24T08:34:25.624949Z"}, {"name": "execute", "started_at": "2025-02-24T08:34:25.625580Z", "completed_at": "2025-02-24T08:34:25.625582Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0060160160064697266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.sat_library_glab", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select distinct\n        record_source,\n        library_id,\n        workflow,\n        phenotype,\n        type,\n        assay,\n        quality,\n        source,\n        truseq_index\n    from\n        \"orcavault\".\"psa\".\"spreadsheet_library_tracking_metadata\"\n\n),\n\ncleaned as (\n\n    select\n        record_source,\n        row_number() over (partition by library_id order by phenotype) as rank,\n        trim(regexp_replace(library_id, E'[\\\\n\\\\r]+', '', 'g')) as library_id,\n        trim(regexp_replace(workflow, E'[\\\\n\\\\r]+', '', 'g')) as workflow,\n        trim(regexp_replace(phenotype, E'[\\\\n\\\\r]+', '', 'g')) as phenotype,\n        trim(regexp_replace(type, E'[\\\\n\\\\r]+', '', 'g')) as type,\n        trim(regexp_replace(assay, E'[\\\\n\\\\r]+', '', 'g')) as assay,\n        trim(regexp_replace(quality, E'[\\\\n\\\\r]+', '', 'g')) as quality,\n        trim(regexp_replace(source, E'[\\\\n\\\\r]+', '', 'g')) as source,\n        trim(regexp_replace(truseq_index, E'[\\\\n\\\\r]+', '', 'g')) as truseq_index\n    from\n        source\n    where\n        library_id is not null or library_id <> ''\n\n),\n\nencoded as (\n\n    select\n        record_source,\n        encode(sha256(cast(library_id as bytea)), 'hex') as library_hk,\n        encode(sha256(concat(workflow, phenotype, type, assay, quality, source, truseq_index)::bytea), 'hex') as hash_diff,\n        workflow,\n        phenotype,\n        type,\n        assay,\n        quality,\n        source,\n        truseq_index\n    from\n        cleaned\n    where\n        rank = 1\n\n),\n\ndifferentiated as (\n\n    select\n        library_hk,\n        hash_diff\n    from\n        encoded\n    \n    except\n    select\n        library_hk,\n        hash_diff\n    from\n        \"orcavault\".\"raw\".\"sat_library_glab\"\n    \n\n),\n\ntransformed as (\n\n    select\n        library_hk,\n        cast('2025-02-24 08:34:25.121660+00:00' as timestamptz) as load_datetime,\n        record_source,\n        hash_diff,\n        workflow,\n        phenotype,\n        type,\n        assay,\n        quality,\n        source,\n        truseq_index\n    from\n        encoded\n    \n    where\n        library_hk in (select library_hk from differentiated)\n    \n\n),\n\nfinal as (\n\n    select\n        cast(library_hk as char(64)) as library_hk,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source,\n        cast(hash_diff as char(64)) as hash_diff,\n        cast(workflow as varchar(255)) as workflow,\n        cast(phenotype as varchar(255)) as phenotype,\n        cast(type as varchar(255)) as type,\n        cast(assay as varchar(255)) as assay,\n        cast(quality as varchar(255)) as quality,\n        cast(source as varchar(255)) as source,\n        cast(truseq_index as varchar(255)) as truseq_index\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"raw\".\"sat_library_glab\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-24T08:34:25.622085Z", "completed_at": "2025-02-24T08:34:25.625252Z"}, {"name": "execute", "started_at": "2025-02-24T08:34:25.625975Z", "completed_at": "2025-02-24T08:34:25.625977Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.006242036819458008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.sat_library_glims", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select\n        record_source,\n        library_id,\n        cast(\"timestamp\" as date) as \"timestamp\",\n        illumina_id,\n        workflow,\n        phenotype,\n        type,\n        assay,\n        quality,\n        source\n    from\n        \"orcavault\".\"psa\".\"spreadsheet_google_lims\"\n\n),\n\ncleaned as (\n\n    select\n        record_source,\n        trim(regexp_replace(library_id, E'[\\\\n\\\\r]+', '', 'g')) as library_id,\n        \"timestamp\",\n        row_number() over (partition by library_id, \"timestamp\" order by \"timestamp\" desc, illumina_id desc, workflow desc) as rank,\n        trim(regexp_replace(workflow, E'[\\\\n\\\\r]+', '', 'g')) as workflow,\n        trim(regexp_replace(phenotype, E'[\\\\n\\\\r]+', '', 'g')) as phenotype,\n        trim(regexp_replace(type, E'[\\\\n\\\\r]+', '', 'g')) as type,\n        trim(regexp_replace(assay, E'[\\\\n\\\\r]+', '', 'g')) as assay,\n        trim(regexp_replace(quality, E'[\\\\n\\\\r]+', '', 'g')) as quality,\n        trim(regexp_replace(source, E'[\\\\n\\\\r]+', '', 'g')) as source\n    from\n        source\n    where\n        library_id is not null or library_id <> ''\n\n),\n\ndifferentiated as (\n\n    select\n        *\n    from\n        cleaned\n    where\n        rank = 1\n    \n        and cast(\"timestamp\" as timestamptz) + time '11:00' > ( select coalesce(max(load_datetime), '1900-01-01') as ldts from \"orcavault\".\"raw\".\"sat_library_glims\" )\n    \n\n),\n\nencoded as (\n\n    select\n        record_source,\n        encode(sha256(cast(library_id as bytea)), 'hex') as library_hk,\n        encode(sha256(concat(\"timestamp\", workflow, phenotype, type, assay, quality, source)::bytea), 'hex') as hash_diff,\n        \"timestamp\",\n        workflow,\n        phenotype,\n        type,\n        assay,\n        quality,\n        source\n    from\n        differentiated\n\n),\n\ntransformed as (\n\n    select\n        library_hk,\n        cast(\"timestamp\" as timestamptz) + time '11:00' as load_datetime,\n        record_source,\n        hash_diff,\n        \"timestamp\",\n        workflow,\n        phenotype,\n        type,\n        assay,\n        quality,\n        source\n    from\n        encoded\n\n),\n\nfinal as (\n\n    select\n        cast(library_hk as char(64)) as library_hk,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source,\n        cast(hash_diff as char(64)) as hash_diff,\n        cast(\"timestamp\" as date) as \"timestamp\",\n        cast(workflow as varchar(255)) as workflow,\n        cast(phenotype as varchar(255)) as phenotype,\n        cast(type as varchar(255)) as type,\n        cast(assay as varchar(255)) as assay,\n        cast(quality as varchar(255)) as quality,\n        cast(source as varchar(255)) as source\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"raw\".\"sat_library_glims\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-24T08:34:25.628816Z", "completed_at": "2025-02-24T08:34:25.635179Z"}, {"name": "execute", "started_at": "2025-02-24T08:34:25.635506Z", "completed_at": "2025-02-24T08:34:25.635509Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009727954864501953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.sat_library_plab", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select\n        library_id,\n        workflow,\n        phenotype,\n        type,\n        assay,\n        quality,\n        source,\n        truseqindex\n    from\n        \"orcavault\".\"ods\".\"data_portal_labmetadata\"\n\n),\n\ncleaned as (\n\n    select\n        trim(regexp_replace(library_id, E'[\\\\n\\\\r]+', '', 'g')) as library_id,\n        trim(regexp_replace(workflow, E'[\\\\n\\\\r]+', '', 'g')) as workflow,\n        trim(regexp_replace(phenotype, E'[\\\\n\\\\r]+', '', 'g')) as phenotype,\n        trim(regexp_replace(type, E'[\\\\n\\\\r]+', '', 'g')) as type,\n        trim(regexp_replace(assay, E'[\\\\n\\\\r]+', '', 'g')) as assay,\n        trim(regexp_replace(quality, E'[\\\\n\\\\r]+', '', 'g')) as quality,\n        trim(regexp_replace(source, E'[\\\\n\\\\r]+', '', 'g')) as source,\n        trim(regexp_replace(truseqindex, E'[\\\\n\\\\r]+', '', 'g')) as truseqindex\n    from\n        source\n\n),\n\nencoded as (\n\n    select\n        encode(sha256(cast(library_id as bytea)), 'hex') as library_hk,\n        encode(sha256(concat(workflow, phenotype, type, assay, quality, source, truseqindex)::bytea), 'hex') as hash_diff,\n        workflow,\n        phenotype,\n        type,\n        assay,\n        quality,\n        source,\n        truseqindex\n    from\n        cleaned\n\n),\n\ndifferentiated as (\n\n    select\n        library_hk,\n        hash_diff\n    from\n        encoded\n    \n    except\n    select\n        library_hk,\n        hash_diff\n    from\n        \"orcavault\".\"raw\".\"sat_library_plab\"\n    \n\n),\n\ntransformed as (\n\n    select\n        library_hk,\n        cast('2025-02-24 08:34:25.121660+00:00' as timestamptz) as load_datetime,\n        (select 'data_portal_labmetadata') as record_source,\n        hash_diff,\n        workflow,\n        phenotype,\n        type,\n        assay,\n        quality,\n        source,\n        truseqindex\n    from\n        encoded\n    \n    where\n        library_hk in (select library_hk from differentiated)\n    \n\n),\n\nfinal as (\n    select\n        cast(library_hk as char(64)) as library_hk,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source,\n        cast(hash_diff as char(64)) as hash_diff,\n        cast(workflow as varchar(255)) as workflow,\n        cast(phenotype as varchar(255)) as phenotype,\n        cast(type as varchar(255)) as type,\n        cast(assay as varchar(255)) as assay,\n        cast(quality as varchar(255)) as quality,\n        cast(source as varchar(255)) as source,\n        cast(truseqindex as varchar(255)) as truseqindex\n    from\n        transformed\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"raw\".\"sat_library_plab\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-24T08:34:25.626846Z", "completed_at": "2025-02-24T08:34:25.635344Z"}, {"name": "execute", "started_at": "2025-02-24T08:34:25.635774Z", "completed_at": "2025-02-24T08:34:25.635777Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01041102409362793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.sat_library_mm", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select\n        library_id,\n        orcabus_id,\n        workflow,\n        phenotype,\n        type,\n        assay,\n        quality\n    from\n        \"orcavault\".\"ods\".\"metadata_manager_library\"\n\n),\n\ncleaned as (\n\n    select\n        trim(regexp_replace(library_id, E'[\\\\n\\\\r]+', '', 'g')) as library_id,\n        trim(regexp_replace(orcabus_id, E'[\\\\n\\\\r]+', '', 'g')) as orcabus_id,\n        trim(regexp_replace(workflow, E'[\\\\n\\\\r]+', '', 'g')) as workflow,\n        trim(regexp_replace(phenotype, E'[\\\\n\\\\r]+', '', 'g')) as phenotype,\n        trim(regexp_replace(type, E'[\\\\n\\\\r]+', '', 'g')) as type,\n        trim(regexp_replace(assay, E'[\\\\n\\\\r]+', '', 'g')) as assay,\n        trim(regexp_replace(quality, E'[\\\\n\\\\r]+', '', 'g')) as quality\n    from\n        source\n\n),\n\nencoded as (\n\n    select\n        encode(sha256(cast(library_id as bytea)), 'hex') as library_hk,\n        encode(sha256(concat(orcabus_id, workflow, phenotype, type, assay, quality)::bytea), 'hex') as hash_diff,\n        orcabus_id,\n        workflow,\n        phenotype,\n        type,\n        assay,\n        quality\n    from\n        cleaned\n\n),\n\ndifferentiated as (\n\n    select\n        library_hk,\n        hash_diff\n    from\n        encoded\n    \n    except\n    select\n        library_hk,\n        hash_diff\n    from\n        \"orcavault\".\"raw\".\"sat_library_mm\"\n    \n\n),\n\ntransformed as (\n\n    select\n        library_hk,\n        cast('2025-02-24 08:34:25.121660+00:00' as timestamptz) as load_datetime,\n        (select 'metadata_manager') as record_source,\n        hash_diff,\n        orcabus_id,\n        workflow,\n        phenotype,\n        type,\n        assay,\n        quality\n    from\n        encoded\n    \n    where\n        library_hk in (select library_hk from differentiated)\n    \n\n),\n\nfinal as (\n\n    select\n        cast(library_hk as char(64)) as library_hk,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source,\n        cast(hash_diff as char(64)) as hash_diff,\n        cast(orcabus_id as varchar(255)) as orcabus_id,\n        cast(workflow as varchar(255)) as workflow,\n        cast(phenotype as varchar(255)) as phenotype,\n        cast(type as varchar(255)) as type,\n        cast(assay as varchar(255)) as assay,\n        cast(quality as varchar(255)) as quality\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"raw\".\"sat_library_mm\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-24T08:34:25.631235Z", "completed_at": "2025-02-24T08:34:25.636432Z"}, {"name": "execute", "started_at": "2025-02-24T08:34:25.637034Z", "completed_at": "2025-02-24T08:34:25.637036Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008420944213867188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.sat_library_plims", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select\n        library_id,\n        cast(\"timestamp\" as date) as \"timestamp\",\n        illumina_id,\n        workflow,\n        phenotype,\n        type,\n        assay,\n        quality,\n        source\n    from\n        \"orcavault\".\"ods\".\"data_portal_limsrow\"\n\n),\n\ncleaned as (\n\n    select\n        trim(regexp_replace(library_id, E'[\\\\n\\\\r]+', '', 'g')) as library_id,\n        \"timestamp\",\n        row_number() over (partition by library_id, \"timestamp\" order by \"timestamp\" desc, illumina_id desc) as rank,\n        trim(regexp_replace(workflow, E'[\\\\n\\\\r]+', '', 'g')) as workflow,\n        trim(regexp_replace(phenotype, E'[\\\\n\\\\r]+', '', 'g')) as phenotype,\n        trim(regexp_replace(type, E'[\\\\n\\\\r]+', '', 'g')) as type,\n        trim(regexp_replace(assay, E'[\\\\n\\\\r]+', '', 'g')) as assay,\n        trim(regexp_replace(quality, E'[\\\\n\\\\r]+', '', 'g')) as quality,\n        trim(regexp_replace(source, E'[\\\\n\\\\r]+', '', 'g')) as source\n    from\n        source\n\n),\n\ndifferentiated as (\n\n    select\n        *\n    from\n        cleaned\n    where\n        rank = 1\n    \n        and cast(\"timestamp\" as timestamptz) + time '11:00' > ( select coalesce(max(load_datetime), '1900-01-01') as ldts from \"orcavault\".\"raw\".\"sat_library_plims\" )\n    \n\n),\n\nencoded as (\n\n    select\n        encode(sha256(cast(library_id as bytea)), 'hex') as library_hk,\n        encode(sha256(concat(\"timestamp\", workflow, phenotype, type, assay, quality, source)::bytea), 'hex') as hash_diff,\n        \"timestamp\",\n        workflow,\n        phenotype,\n        type,\n        assay,\n        quality,\n        source\n    from\n        differentiated\n\n),\n\ntransformed as (\n\n    select\n        library_hk,\n        cast(\"timestamp\" as timestamptz) + time '11:00' as load_datetime,\n        (select 'data_portal_limsrow') as record_source,\n        hash_diff,\n        \"timestamp\",\n        workflow,\n        phenotype,\n        type,\n        assay,\n        quality,\n        source\n    from\n        encoded\n\n),\n\nfinal as (\n\n    select\n        cast(library_hk as char(64)) as library_hk,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source,\n        cast(hash_diff as char(64)) as hash_diff,\n        cast(\"timestamp\" as date) as \"timestamp\",\n        cast(workflow as varchar(255)) as workflow,\n        cast(phenotype as varchar(255)) as phenotype,\n        cast(type as varchar(255)) as type,\n        cast(assay as varchar(255)) as assay,\n        cast(quality as varchar(255)) as quality,\n        cast(source as varchar(255)) as source\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"raw\".\"sat_library_plims\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-24T08:34:25.633117Z", "completed_at": "2025-02-24T08:34:25.636580Z"}, {"name": "execute", "started_at": "2025-02-24T08:34:25.637273Z", "completed_at": "2025-02-24T08:34:25.637275Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.006658792495727539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.link_internal_to_external_sample", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select sample_id, external_sample_id from \"orcavault\".\"ods\".\"data_portal_labmetadata\"\n    union\n    select sample_id, external_sample_id from \"orcavault\".\"ods\".\"data_portal_limsrow\"\n    union\n    select sample_id, external_sample_id from \"orcavault\".\"ods\".\"metadata_manager_sample\"\n    union\n    select sample_id, external_sample_id from \"orcavault\".\"psa\".\"spreadsheet_library_tracking_metadata\"\n    union\n    select sample_id, external_sample_id from \"orcavault\".\"psa\".\"spreadsheet_google_lims\"\n\n),\n\ncleaned as (\n\n    select\n        distinct sample_id, trim(external_sample_id) as external_sample_id\n    from\n        source\n    where\n        (sample_id is not null and sample_id <> '') and\n        (external_sample_id is not null and external_sample_id <> '')\n\n),\n\ndifferentiated as (\n\n    select\n        encode(sha256(cast(external_sample_id as bytea)), 'hex') as external_sample_hk,\n        encode(sha256(cast(sample_id as bytea)), 'hex') as sample_hk\n    from\n        cleaned\n    \n    except\n    select\n        external_sample_hk,\n        sample_hk\n    from\n        \"orcavault\".\"raw\".\"link_internal_to_external_sample\"\n    \n\n),\n\ntransformed as (\n\n    select\n        external_sample_hk,\n        sample_hk,\n        cast('2025-02-24 08:34:25.121660+00:00' as timestamptz) as load_datetime,\n        (select 'lab') as record_source\n    from\n        differentiated\n\n),\n\nfinal as (\n\n    select\n        cast(encode(sha256(concat(external_sample_hk, sample_hk)::bytea), 'hex') as char(64)) as internal_external_sample_hk,\n        cast(external_sample_hk as char(64)) as external_sample_hk,\n        cast(sample_hk as char(64)) as sample_hk,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"raw\".\"link_internal_to_external_sample\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-24T08:34:25.638124Z", "completed_at": "2025-02-24T08:34:25.645790Z"}, {"name": "execute", "started_at": "2025-02-24T08:34:25.647824Z", "completed_at": "2025-02-24T08:34:25.647827Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01114797592163086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.link_library_sample", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select library_id, sample_id from \"orcavault\".\"ods\".\"data_portal_limsrow\"\n    union\n    select library_id, sample_id from \"orcavault\".\"ods\".\"data_portal_labmetadata\"\n    union\n    select library_id, smp.sample_id as sample_id from \"orcavault\".\"ods\".\"metadata_manager_library\" as lib\n        join \"orcavault\".\"ods\".\"metadata_manager_sample\" as smp on lib.sample_orcabus_id = smp.orcabus_id\n    union\n    select library_id, sample_id from \"orcavault\".\"psa\".\"spreadsheet_library_tracking_metadata\"\n    union\n    select library_id, sample_id from \"orcavault\".\"psa\".\"spreadsheet_google_lims\"\n\n),\n\ncleaned as (\n\n    select\n        distinct library_id, sample_id\n    from\n        source\n    where\n        (library_id is not null and library_id <> '') and\n        (sample_id is not null and sample_id <> '')\n\n),\n\ndifferentiated as (\n\n    select\n        encode(sha256(cast(sample_id as bytea)), 'hex') as sample_hk,\n        encode(sha256(cast(library_id as bytea)), 'hex') as library_hk\n    from\n        cleaned\n    \n    except\n    select\n        sample_hk,\n        library_hk\n    from\n        \"orcavault\".\"raw\".\"link_library_sample\"\n    \n\n),\n\ntransformed as (\n\n    select\n        sample_hk,\n        library_hk,\n        cast('2025-02-24 08:34:25.121660+00:00' as timestamptz) as load_datetime,\n        (select 'lab') as record_source\n    from\n        differentiated\n\n),\n\nfinal as (\n\n    select\n        cast(encode(sha256(concat(sample_hk, library_hk)::bytea), 'hex') as char(64)) as library_sample_hk,\n        cast(sample_hk as char(64)) as sample_hk,\n        cast(library_hk as char(64)) as library_hk,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"raw\".\"link_library_sample\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-24T08:34:25.640428Z", "completed_at": "2025-02-24T08:34:25.645928Z"}, {"name": "execute", "started_at": "2025-02-24T08:34:25.648107Z", "completed_at": "2025-02-24T08:34:25.648110Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011271953582763672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.link_library_project", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select library_id, project_name as project_id from \"orcavault\".\"ods\".\"data_portal_labmetadata\"\n    union\n    select library_id, project_name as project_id from \"orcavault\".\"ods\".\"data_portal_limsrow\"\n    union\n    select lib.library_id as library_id, prj.project_id as project_id from \"orcavault\".\"ods\".\"metadata_manager_library\" as lib\n        join \"orcavault\".\"ods\".\"metadata_manager_libraryprojectlink\" as lnk on lnk.library_orcabus_id = lib.orcabus_id\n        join \"orcavault\".\"ods\".\"metadata_manager_project\" as prj on lnk.project_orcabus_id = prj.orcabus_id\n    union\n    select library_id, project_name as project_id from \"orcavault\".\"psa\".\"spreadsheet_library_tracking_metadata\"\n    union\n    select library_id, project_name as project_id from \"orcavault\".\"psa\".\"spreadsheet_google_lims\"\n\n),\n\ncleaned as (\n\n    select\n        distinct library_id, project_id\n    from\n        source\n    where\n        (library_id is not null and library_id <> '') and\n        (project_id is not null and project_id <> '')\n\n),\n\ndifferentiated as (\n\n    select\n        encode(sha256(cast(project_id as bytea)), 'hex') as project_hk,\n        encode(sha256(cast(library_id as bytea)), 'hex') as library_hk\n    from\n        cleaned\n    \n    except\n    select\n        project_hk,\n        library_hk\n    from\n        \"orcavault\".\"raw\".\"link_library_project\"\n    \n\n),\n\ntransformed as (\n\n    select\n        project_hk,\n        library_hk,\n        cast('2025-02-24 08:34:25.121660+00:00' as timestamptz) as load_datetime,\n        (select 'lab') as record_source\n    from\n        differentiated\n\n),\n\nfinal as (\n\n    select\n        cast(encode(sha256(concat(project_hk, library_hk)::bytea), 'hex') as char(64)) as library_project_hk,\n        cast(project_hk as char(64)) as project_hk,\n        cast(library_hk as char(64)) as library_hk,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"raw\".\"link_library_project\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-24T08:34:25.643415Z", "completed_at": "2025-02-24T08:34:25.648427Z"}, {"name": "execute", "started_at": "2025-02-24T08:34:25.648807Z", "completed_at": "2025-02-24T08:34:25.648809Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006175994873046875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.link_project_contact", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select project_name as project_id, project_owner as contact_id from \"orcavault\".\"ods\".\"data_portal_labmetadata\"\n    union\n    select project_name as project_id, project_owner as contact_id from \"orcavault\".\"ods\".\"data_portal_limsrow\"\n    union\n    select project_id, contact_id from \"orcavault\".\"ods\".\"metadata_manager_project\" as prj\n        join \"orcavault\".\"ods\".\"metadata_manager_projectcontactlink\" as lnk on lnk.project_orcabus_id = prj.orcabus_id\n        join \"orcavault\".\"ods\".\"metadata_manager_contact\" as cnt on lnk.contact_orcabus_id = cnt.orcabus_id\n    union\n    select project_name as project_id, project_owner as contact_id from \"orcavault\".\"psa\".\"spreadsheet_library_tracking_metadata\"\n    union\n    select project_name as project_id, project_owner as contact_id from \"orcavault\".\"psa\".\"spreadsheet_google_lims\"\n\n),\n\ncleaned as (\n\n    select\n        distinct trim(project_id) as project_id, trim(contact_id) as contact_id\n    from\n        source\n    where\n        (project_id is not null and project_id <> '') and\n        (contact_id is not null and contact_id <> '')\n\n),\n\ndifferentiated as (\n\n    select\n        encode(sha256(cast(contact_id as bytea)), 'hex') as contact_hk,\n        encode(sha256(cast(project_id as bytea)), 'hex') as project_hk\n    from\n        cleaned\n    \n    except\n    select\n        contact_hk,\n        project_hk\n    from\n        \"orcavault\".\"raw\".\"link_project_contact\"\n    \n\n),\n\ntransformed as (\n\n    select\n        contact_hk,\n        project_hk,\n        cast('2025-02-24 08:34:25.121660+00:00' as timestamptz) as load_datetime,\n        (select 'lab') as record_source\n    from\n        differentiated\n\n),\n\nfinal as (\n\n    select\n        cast(encode(sha256(concat(contact_hk, project_hk)::bytea), 'hex') as char(64)) as project_contact_hk,\n        cast(contact_hk as char(64)) as contact_hk,\n        cast(project_hk as char(64)) as project_hk,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"raw\".\"link_project_contact\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-24T08:34:25.646074Z", "completed_at": "2025-02-24T08:34:25.649060Z"}, {"name": "execute", "started_at": "2025-02-24T08:34:25.649412Z", "completed_at": "2025-02-24T08:34:25.649414Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.006600856781005859, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.sat_project_mm", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select\n        *\n    from\n        \"orcavault\".\"ods\".\"metadata_manager_project\"\n\n),\n\ncleaned as (\n\n    select\n        trim(regexp_replace(project_id, E'[\\\\n\\\\r]+', '', 'g')) as project_id,\n        trim(regexp_replace(orcabus_id, E'[\\\\n\\\\r]+', '', 'g')) as orcabus_id,\n        trim(regexp_replace(name, E'[\\\\n\\\\r]+', '', 'g')) as name,\n        trim(regexp_replace(description, E'[\\\\n\\\\r]+', '', 'g')) as description\n    from\n        source\n\n),\n\nencoded as (\n\n    select\n        encode(sha256(cast(project_id as bytea)), 'hex') as project_hk,\n        encode(sha256(concat(orcabus_id, name, description)::bytea), 'hex') as hash_diff,\n        orcabus_id,\n        name,\n        description\n    from\n        cleaned\n\n),\n\ndifferentiated as (\n\n    select\n        project_hk,\n        hash_diff\n    from\n        encoded\n    \n    except\n    select\n        project_hk,\n        hash_diff\n    from\n        \"orcavault\".\"raw\".\"sat_project_mm\"\n    \n\n),\n\ntransformed as (\n\n    select\n        project_hk,\n        cast('2025-02-24 08:34:25.121660+00:00' as timestamptz) as load_datetime,\n        (select 'metadata_manager_project') as record_source,\n        hash_diff,\n        orcabus_id,\n        name,\n        description\n    from\n        encoded\n    \n    where\n        project_hk in (select project_hk from differentiated)\n    \n\n),\n\nfinal as (\n\n    select\n        cast(project_hk as char(64)) as project_hk,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source,\n        cast(hash_diff as char(64)) as hash_diff,\n        cast(orcabus_id as varchar(255)) as orcabus_id,\n        cast(name as varchar(255)) as name,\n        cast(description as varchar(255)) as description\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"raw\".\"sat_project_mm\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-24T08:34:25.649854Z", "completed_at": "2025-02-24T08:34:25.651834Z"}, {"name": "execute", "started_at": "2025-02-24T08:34:25.651999Z", "completed_at": "2025-02-24T08:34:25.652001Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0028438568115234375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.link_library_sequencing_run", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select library_id, instrument_run_id as sequencing_run_id from \"orcavault\".\"ods\".\"data_portal_libraryrun\"\n    union\n    select library_id, illumina_id as sequencing_run_id from \"orcavault\".\"ods\".\"data_portal_limsrow\"\n    union\n    select library_id, illumina_id as sequencing_run_id from \"orcavault\".\"psa\".\"spreadsheet_google_lims\"\n\n),\n\ncleaned as (\n\n    select\n        distinct library_id, sequencing_run_id\n    from\n        source\n    where\n        (library_id is not null and library_id <> '') and\n        (sequencing_run_id is not null and sequencing_run_id <> '')\n\n),\n\ndifferentiated as (\n\n    select\n        encode(sha256(cast(sequencing_run_id as bytea)), 'hex') as sequencing_run_hk,\n        encode(sha256(cast(library_id as bytea)), 'hex') as library_hk\n    from\n        cleaned\n    \n    except\n    select\n        sequencing_run_hk,\n        library_hk\n    from\n        \"orcavault\".\"raw\".\"link_library_sequencing_run\"\n    \n\n),\n\ntransformed as (\n\n    select\n        sequencing_run_hk,\n        library_hk,\n        cast('2025-02-24 08:34:25.121660+00:00' as timestamptz) as load_datetime,\n        (select 'lab') as record_source\n    from\n        differentiated\n\n),\n\nfinal as (\n\n    select\n        cast(encode(sha256(concat(sequencing_run_hk, library_hk)::bytea), 'hex') as char(64)) as library_sequencing_run_hk,\n        cast(sequencing_run_hk as char(64)) as sequencing_run_hk,\n        cast(library_hk as char(64)) as library_hk,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"raw\".\"link_library_sequencing_run\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-24T08:34:25.653419Z", "completed_at": "2025-02-24T08:34:25.657017Z"}, {"name": "execute", "started_at": "2025-02-24T08:34:25.657186Z", "completed_at": "2025-02-24T08:34:25.657188Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004456043243408203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.sat_library_sequencing_run_glims", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select\n        illumina_id as sequencing_run_id,\n        library_id,\n        record_source,\n        cast(\"timestamp\" as date) as \"timestamp\",\n        run,\n        override_cycles,\n        secondary_analysis,\n        number_fastqs,\n        fastq,\n        results,\n        notes,\n        trello\n    from\n        \"orcavault\".\"psa\".\"spreadsheet_google_lims\"\n\n),\n\ncleaned as (\n\n    select\n        row_number() over (partition by library_id, \"timestamp\" order by \"timestamp\" desc, sequencing_run_id desc) as rank,\n        sequencing_run_id,\n        trim(regexp_replace(library_id, E'[\\\\n\\\\r]+', '', 'g')) as library_id,\n        record_source,\n        \"timestamp\",\n        run,\n        trim(regexp_replace(override_cycles, E'[\\\\n\\\\r]+', '', 'g')) as override_cycles,\n        trim(regexp_replace(secondary_analysis, E'[\\\\n\\\\r]+', '', 'g')) as secondary_analysis,\n        trim(regexp_replace(number_fastqs, E'[\\\\n\\\\r]+', '', 'g')) as number_fastqs,\n        trim(regexp_replace(fastq, E'[\\\\n\\\\r]+', '', 'g')) as fastq,\n        trim(regexp_replace(results, E'[\\\\n\\\\r]+', '', 'g')) as results,\n        trim(regexp_replace(notes, E'[\\\\n\\\\r]+', '', 'g')) as notes,\n        trim(regexp_replace(trello, E'[\\\\n\\\\r]+', '', 'g')) as trello\n    from\n        source\n    where\n        (library_id is not null or library_id <> '') and\n        (sequencing_run_id is not null or sequencing_run_id <> '')\n\n),\n\ndifferentiated as (\n\n    select\n        *\n    from\n        cleaned\n    where\n        rank = 1\n    \n        and cast(\"timestamp\" as timestamptz) + time '11:00' > ( select coalesce(max(load_datetime), '1900-01-01') as ldts from \"orcavault\".\"raw\".\"sat_library_sequencing_run_glims\" )\n    \n\n),\n\nencoded as (\n\n    select\n        encode(sha256(cast(sequencing_run_id as bytea)), 'hex') as sequencing_run_hk,\n        encode(sha256(cast(library_id as bytea)), 'hex') as library_hk,\n        record_source,\n        encode(sha256(concat(\"timestamp\", run, override_cycles, secondary_analysis, number_fastqs, fastq, results, notes, trello)::bytea), 'hex') as hash_diff,\n        \"timestamp\",\n        run,\n        override_cycles,\n        secondary_analysis,\n        number_fastqs,\n        fastq,\n        results,\n        notes,\n        trello\n    from\n        differentiated\n\n),\n\ntransformed as (\n\n    select\n        encode(sha256(concat(sequencing_run_hk, library_hk)::bytea), 'hex') as library_sequencing_run_hk,\n        cast(\"timestamp\" as timestamptz) + time '11:00' as load_datetime,\n        record_source,\n        hash_diff,\n        \"timestamp\",\n        run,\n        override_cycles,\n        secondary_analysis,\n        number_fastqs,\n        fastq,\n        results,\n        notes,\n        trello\n    from\n        encoded\n\n),\n\nfinal as (\n\n    select\n        cast(library_sequencing_run_hk as char(64)) as library_sequencing_run_hk,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source,\n        cast(hash_diff as char(64)) as hash_diff,\n        cast(\"timestamp\" as date) as \"timestamp\",\n        cast(run as integer) as run,\n        cast(override_cycles as varchar(255)) as override_cycles,\n        cast(secondary_analysis as varchar(255)) as secondary_analysis,\n        cast(number_fastqs as varchar(255)) as number_fastqs,\n        cast(fastq as text) as fastq,\n        cast(results as text) as results,\n        cast(notes as text) as notes,\n        cast(trello as text) as trello\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"raw\".\"sat_library_sequencing_run_glims\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-24T08:34:25.655309Z", "completed_at": "2025-02-24T08:34:25.657463Z"}, {"name": "execute", "started_at": "2025-02-24T08:34:25.657640Z", "completed_at": "2025-02-24T08:34:25.657643Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004724025726318359, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.sat_library_sequencing_run_plims", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select\n        illumina_id as sequencing_run_id,\n        library_id,\n        cast(\"timestamp\" as date) as \"timestamp\",\n        run,\n        override_cycles,\n        secondary_analysis,\n        number_fastqs,\n        fastq,\n        results,\n        notes,\n        trello\n    from\n        \"orcavault\".\"ods\".\"data_portal_limsrow\"\n\n),\n\ncleaned as (\n\n    select\n        sequencing_run_id,\n        trim(regexp_replace(library_id, E'[\\\\n\\\\r]+', '', 'g')) as library_id,\n        \"timestamp\",\n        run,\n        trim(regexp_replace(override_cycles, E'[\\\\n\\\\r]+', '', 'g')) as override_cycles,\n        trim(regexp_replace(secondary_analysis, E'[\\\\n\\\\r]+', '', 'g')) as secondary_analysis,\n        trim(regexp_replace(number_fastqs, E'[\\\\n\\\\r]+', '', 'g')) as number_fastqs,\n        trim(regexp_replace(fastq, E'[\\\\n\\\\r]+', '', 'g')) as fastq,\n        trim(regexp_replace(results, E'[\\\\n\\\\r]+', '', 'g')) as results,\n        trim(regexp_replace(notes, E'[\\\\n\\\\r]+', '', 'g')) as notes,\n        trim(regexp_replace(trello, E'[\\\\n\\\\r]+', '', 'g')) as trello\n    from\n        source\n\n),\n\ndifferentiated as (\n\n    select\n        *\n    from\n        cleaned\n    \n    where\n        cast(\"timestamp\" as timestamptz) + time '11:00' > ( select coalesce(max(load_datetime), '1900-01-01') as ldts from \"orcavault\".\"raw\".\"sat_library_sequencing_run_plims\" )\n    \n\n),\n\nencoded as (\n\n    select\n        encode(sha256(cast(sequencing_run_id as bytea)), 'hex') as sequencing_run_hk,\n        encode(sha256(cast(library_id as bytea)), 'hex') as library_hk,\n        encode(sha256(concat(\"timestamp\", run, override_cycles, secondary_analysis, number_fastqs, fastq, results, notes, trello)::bytea), 'hex') as hash_diff,\n        \"timestamp\",\n        run,\n        override_cycles,\n        secondary_analysis,\n        number_fastqs,\n        fastq,\n        results,\n        notes,\n        trello\n    from\n        differentiated\n\n),\n\ntransformed as (\n\n    select\n        encode(sha256(concat(sequencing_run_hk, library_hk)::bytea), 'hex') as library_sequencing_run_hk,\n        cast(\"timestamp\" as timestamptz) + time '11:00' as load_datetime,\n        (select 'data_portal_limsrow') as record_source,\n        hash_diff,\n        \"timestamp\",\n        run,\n        override_cycles,\n        secondary_analysis,\n        number_fastqs,\n        fastq,\n        results,\n        notes,\n        trello\n    from\n        encoded\n\n),\n\nfinal as (\n\n    select\n        cast(library_sequencing_run_hk as char(64)) as library_sequencing_run_hk,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source,\n        cast(hash_diff as char(64)) as hash_diff,\n        cast(\"timestamp\" as date) as \"timestamp\",\n        cast(run as integer) as run,\n        cast(override_cycles as varchar(255)) as override_cycles,\n        cast(secondary_analysis as varchar(255)) as secondary_analysis,\n        cast(number_fastqs as varchar(255)) as number_fastqs,\n        cast(fastq as text) as fastq,\n        cast(results as text) as results,\n        cast(notes as text) as notes,\n        cast(trello as text) as trello\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"raw\".\"sat_library_sequencing_run_plims\"", "batch_results": null}], "elapsed_time": 0.23706889152526855, "args": {"printer_width": 80, "state_modified_compare_vars": false, "strict_mode": false, "version_check": true, "skip_nodes_if_on_run_start_fails": false, "use_colors": true, "log_format_file": "debug", "vars": {}, "static_parser": true, "require_explicit_package_overrides_for_builtin_materializations": true, "log_level_file": "debug", "invocation_command": "dbt docs generate", "quiet": false, "defer": false, "which": "generate", "select": [], "require_batched_execution_for_custom_microbatch_strategy": false, "log_format": "default", "empty_catalog": false, "log_path": "/Users/sklin/Projects/umccr/warehouse/orcahouse/orcavault/logs", "partial_parse": true, "compile": true, "exclude": [], "warn_error_options": {"include": [], "exclude": []}, "show_resource_report": false, "log_file_max_bytes": 10485760, "state_modified_compare_more_unrendered_values": false, "partial_parse_file_diff": true, "cache_selected_only": false, "static": false, "source_freshness_run_project_hooks": false, "print": true, "require_resource_names_without_spaces": false, "use_colors_file": true, "send_anonymous_usage_stats": true, "write_json": true, "require_nested_cumulative_type_params": false, "project_dir": "/Users/sklin/Projects/umccr/warehouse/orcahouse/orcavault", "profiles_dir": "/Users/sklin/Projects/umccr/warehouse/orcahouse/orcavault", "populate_cache": true, "require_yaml_configuration_for_mf_time_spines": false, "log_level": "info", "indirect_selection": "eager", "macro_debugging": false, "introspect": true, "favor_state": false}}