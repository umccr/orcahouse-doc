{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.9.2", "generated_at": "2025-03-28T10:30:17.787212Z", "invocation_id": "b0bb104a-f2cf-4d16-93d0-4885add5a6df", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-28T10:30:17.596386Z", "completed_at": "2025-03-28T10:30:17.603003Z"}, {"name": "execute", "started_at": "2025-03-28T10:30:17.603626Z", "completed_at": "2025-03-28T10:30:17.603635Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.017368078231811523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.hub_s3object", "compiled": true, "compiled_code": "\n\nwith source1 as (\n\n    select\n        bucket,\n        \"key\"\n    from\n        \"orcavault\".\"ods\".\"data_portal_s3object\"\n    \n    where\n        cast(last_modified_date as timestamptz) > ( select coalesce(max(load_datetime), '1900-01-01') as ldts from \"orcavault\".\"dcl\".\"hub_s3object\" )\n    \n\n),\n\nsource2 as (\n\n    select\n        bucket,\n        \"key\"\n    from\n        \"orcavault\".\"ods\".\"file_manager_s3_object\"\n    \n    where\n        cast(event_time as timestamptz) > ( select coalesce(max(load_datetime), '1900-01-01') as ldts from \"orcavault\".\"dcl\".\"hub_s3object\" )\n    \n\n),\n\ncombined as (\n\n    select bucket, \"key\" from source1\n    union\n    select bucket, \"key\" from source2\n\n),\n\ntransformed as (\n\n    select\n        encode(sha256(concat(bucket, \"key\")::bytea), 'hex') as s3object_hk,\n        bucket,\n        \"key\",\n        cast('2025-03-28 10:30:16.299930+00:00' as timestamptz) as load_datetime,\n        (select 's3') as record_source,\n        cast('2025-03-28 10:30:16.299930+00:00' as timestamptz) as last_seen_datetime\n    from\n        combined\n\n),\n\nfinal as (\n\n    select\n        cast(s3object_hk as char(64)) as s3object_hk,\n        cast(bucket as varchar(255)) as bucket,\n        cast(\"key\" as text) as \"key\",\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source,\n        cast(last_seen_datetime as timestamptz) as last_seen_datetime\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"dcl\".\"hub_s3object\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-28T10:30:17.587916Z", "completed_at": "2025-03-28T10:30:17.603237Z"}, {"name": "execute", "started_at": "2025-03-28T10:30:17.604007Z", "completed_at": "2025-03-28T10:30:17.604012Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.018143892288208008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.hub_workflow_run", "compiled": true, "compiled_code": "\n\nwith source1 as (\n\n    select\n        portal_run_id\n    from\n        \"orcavault\".\"ods\".\"data_portal_workflow\"\n    \n    where\n        cast(start as timestamptz) > ( select coalesce(max(load_datetime), '1900-01-01') as ldts from \"orcavault\".\"dcl\".\"hub_workflow_run\" )\n    \n\n),\n\nsource2 as (\n\n    select\n        portal_run_id\n    from \"orcavault\".\"ods\".\"workflow_manager_workflowrun\" wfr\n        join \"orcavault\".\"ods\".\"workflow_manager_state\" stt on stt.workflow_run_id = wfr.orcabus_id\n    \n    where\n        cast(stt.timestamp as timestamptz) > ( select coalesce(max(load_datetime), '1900-01-01') as ldts from \"orcavault\".\"dcl\".\"hub_workflow_run\" )\n    \n\n),\n\ncombined as (\n\n    select distinct portal_run_id from source1\n    union\n    select distinct portal_run_id from source2\n\n),\n\ntransformed as (\n\n    select\n        encode(sha256(cast(portal_run_id as bytea)), 'hex') as workflow_run_hk,\n        portal_run_id,\n        cast('2025-03-28 10:30:16.299930+00:00' as timestamptz) as load_datetime,\n        (select 'portal_workflow_manager') as record_source,\n        cast('2025-03-28 10:30:16.299930+00:00' as timestamptz) as last_seen_datetime\n    from\n        combined\n    order by portal_run_id\n\n),\n\nfinal as (\n\n    select\n        cast(workflow_run_hk as char(64)) as workflow_run_hk,\n        cast(portal_run_id as char(16)) as portal_run_id,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source,\n        cast(last_seen_datetime as timestamptz) as last_seen_datetime\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"dcl\".\"hub_workflow_run\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-28T10:30:17.600060Z", "completed_at": "2025-03-28T10:30:17.603441Z"}, {"name": "execute", "started_at": "2025-03-28T10:30:17.604536Z", "completed_at": "2025-03-28T10:30:17.604540Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.017633914947509766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.spreadsheet_library_tracking_metadata", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select * from \"orcavault\".\"tsa\".\"spreadsheet_library_tracking_metadata\"\n\n),\n\ncleaned as (\n\n    select\n        trim(regexp_replace(assay, E'[\\\\n\\\\r]+', '', 'g')) as assay,\n        trim(regexp_replace(comments, E'[\\\\n\\\\r]+', '', 'g')) as comments,\n        trim(regexp_replace(coverage, E'[\\\\n\\\\r]+', '', 'g')) as coverage,\n        trim(regexp_replace(experiment_id, E'[\\\\n\\\\r]+', '', 'g')) as experiment_id,\n        trim(regexp_replace(external_sample_id, E'[\\\\n\\\\r]+', '', 'g')) as external_sample_id,\n        trim(regexp_replace(external_subject_id, E'[\\\\n\\\\r]+', '', 'g')) as external_subject_id,\n        trim(regexp_replace(library_id, E'[\\\\n\\\\r]+', '', 'g')) as library_id,\n        trim(regexp_replace(override_cycles, E'[\\\\n\\\\r]+', '', 'g')) as override_cycles,\n        trim(regexp_replace(phenotype, E'[\\\\n\\\\r]+', '', 'g')) as phenotype,\n        trim(regexp_replace(project_name, E'[\\\\n\\\\r]+', '', 'g')) as project_name,\n        trim(regexp_replace(project_owner, E'[\\\\n\\\\r]+', '', 'g')) as project_owner,\n        trim(regexp_replace(qpcr_id, E'[\\\\n\\\\r]+', '', 'g')) as qpcr_id,\n        trim(regexp_replace(quality, E'[\\\\n\\\\r]+', '', 'g')) as quality,\n        trim(regexp_replace(run, E'[\\\\n\\\\r]+', '', 'g')) as run,\n        trim(regexp_replace(sample_id, E'[\\\\n\\\\r]+', '', 'g')) as sample_id,\n        trim(regexp_replace(sample_name, E'[\\\\n\\\\r]+', '', 'g')) as sample_name,\n        trim(regexp_replace(samplesheet_sample_id, E'[\\\\n\\\\r]+', '', 'g')) as samplesheet_sample_id,\n        trim(regexp_replace(source, E'[\\\\n\\\\r]+', '', 'g')) as source,\n        trim(regexp_replace(subject_id, E'[\\\\n\\\\r]+', '', 'g')) as subject_id,\n        trim(regexp_replace(truseq_index, E'[\\\\n\\\\r]+', '', 'g')) as truseq_index,\n        trim(regexp_replace(type, E'[\\\\n\\\\r]+', '', 'g')) as type,\n        trim(regexp_replace(workflow, E'[\\\\n\\\\r]+', '', 'g')) as workflow,\n        trim(regexp_replace(r_rna, E'[\\\\n\\\\r]+', '', 'g')) as r_rna,\n        trim(regexp_replace(study, E'[\\\\n\\\\r]+', '', 'g')) as study,\n        trim(regexp_replace(sheet_name, E'[\\\\n\\\\r]+', '', 'g')) as sheet_name\n    from\n        source\n    where\n        coalesce\n        (\n            nullif(assay, ''),\n            nullif(comments, ''),\n            nullif(coverage, ''),\n            nullif(experiment_id, ''),\n            nullif(external_sample_id, ''),\n            nullif(external_subject_id, ''),\n            nullif(library_id, ''),\n            nullif(override_cycles, ''),\n            nullif(phenotype, ''),\n            nullif(project_name, ''),\n            nullif(project_owner, ''),\n            nullif(qpcr_id, ''),\n            nullif(quality, ''),\n            nullif(run, ''),\n            nullif(sample_id, ''),\n            nullif(sample_name, ''),\n            nullif(samplesheet_sample_id, ''),\n            nullif(source, ''),\n            nullif(subject_id, ''),\n            nullif(truseq_index, ''),\n            nullif(type, ''),\n            nullif(workflow, ''),\n            nullif(r_rna, ''),\n            nullif(study, '')\n        ) is not null\n\n),\n\ndifferentiated as (\n\n    select\n        *\n    from\n        cleaned\n    \n    except\n    select\n        assay,\n        comments,\n        coverage,\n        experiment_id,\n        external_sample_id,\n        external_subject_id,\n        library_id,\n        override_cycles,\n        phenotype,\n        project_name,\n        project_owner,\n        qpcr_id,\n        quality,\n        run,\n        sample_id,\n        sample_name,\n        samplesheet_sample_id,\n        source,\n        subject_id,\n        truseq_index,\n        type,\n        workflow,\n        r_rna,\n        study,\n        sheet_name\n    from\n        \"orcavault\".\"psa\".\"spreadsheet_library_tracking_metadata\"\n    \n\n),\n\ntransformed as (\n\n    select\n        *,\n        cast('2025-03-28 10:30:16.299930+00:00' as timestamptz) as load_datetime,\n        (select 'UMCCR_Library_Tracking_MetaData') as record_source\n    from\n        differentiated\n\n),\n\nfinal as (\n\n    select * from transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"psa\".\"spreadsheet_library_tracking_metadata\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-28T10:30:17.594495Z", "completed_at": "2025-03-28T10:30:17.604357Z"}, {"name": "execute", "started_at": "2025-03-28T10:30:17.605422Z", "completed_at": "2025-03-28T10:30:17.605424Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.019323110580444336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.spreadsheet_google_lims", "compiled": true, "compiled_code": "\n\nwith cutoff as (\n\n    select coalesce(max(load_datetime), '1900-01-01') as ldts from \"orcavault\".\"psa\".\"spreadsheet_google_lims\"\n\n),\n\nsource as (\n\n    select\n        *\n    from\n        \"orcavault\".\"tsa\".\"spreadsheet_google_lims\"\n\n    \n\n    where cast(\"timestamp\" as timestamptz) + time '11:00' > ( select ldts from cutoff )\n\n    \n\n),\n\ncleaned as (\n\n    select\n        trim(regexp_replace(illumina_id, E'[\\\\n\\\\r]+', '', 'g')) as illumina_id,\n        trim(regexp_replace(run, E'[\\\\n\\\\r]+', '', 'g')) as run,\n        trim(regexp_replace(\"timestamp\", E'[\\\\n\\\\r]+', '', 'g')) as \"timestamp\",\n        trim(regexp_replace(subject_id, E'[\\\\n\\\\r]+', '', 'g')) as subject_id,\n        trim(regexp_replace(sample_id, E'[\\\\n\\\\r]+', '', 'g')) as sample_id,\n        trim(regexp_replace(library_id, E'[\\\\n\\\\r]+', '', 'g')) as library_id,\n        trim(regexp_replace(external_subject_id, E'[\\\\n\\\\r]+', '', 'g')) as external_subject_id,\n        trim(regexp_replace(external_sample_id, E'[\\\\n\\\\r]+', '', 'g')) as external_sample_id,\n        trim(regexp_replace(external_library_id, E'[\\\\n\\\\r]+', '', 'g')) as external_library_id,\n        trim(regexp_replace(sample_name, E'[\\\\n\\\\r]+', '', 'g')) as sample_name,\n        trim(regexp_replace(project_owner, E'[\\\\n\\\\r]+', '', 'g')) as project_owner,\n        trim(regexp_replace(project_name, E'[\\\\n\\\\r]+', '', 'g')) as project_name,\n        trim(regexp_replace(project_custodian, E'[\\\\n\\\\r]+', '', 'g')) as project_custodian,\n        trim(regexp_replace(type, E'[\\\\n\\\\r]+', '', 'g')) as type,\n        trim(regexp_replace(assay, E'[\\\\n\\\\r]+', '', 'g')) as assay,\n        trim(regexp_replace(override_cycles, E'[\\\\n\\\\r]+', '', 'g')) as override_cycles,\n        trim(regexp_replace(phenotype, E'[\\\\n\\\\r]+', '', 'g')) as phenotype,\n        trim(regexp_replace(source, E'[\\\\n\\\\r]+', '', 'g')) as source,\n        trim(regexp_replace(quality, E'[\\\\n\\\\r]+', '', 'g')) as quality,\n        trim(regexp_replace(topup, E'[\\\\n\\\\r]+', '', 'g')) as topup,\n        trim(regexp_replace(secondary_analysis, E'[\\\\n\\\\r]+', '', 'g')) as secondary_analysis,\n        trim(regexp_replace(workflow, E'[\\\\n\\\\r]+', '', 'g')) as workflow,\n        trim(regexp_replace(tags, E'[\\\\n\\\\r]+', '', 'g')) as tags,\n        trim(regexp_replace(fastq, E'[\\\\n\\\\r]+', '', 'g')) as fastq,\n        trim(regexp_replace(number_fastqs, E'[\\\\n\\\\r]+', '', 'g')) as number_fastqs,\n        trim(regexp_replace(results, E'[\\\\n\\\\r]+', '', 'g')) as results,\n        trim(regexp_replace(trello, E'[\\\\n\\\\r]+', '', 'g')) as trello,\n        trim(regexp_replace(notes, E'[\\\\n\\\\r]+', '', 'g')) as notes,\n        trim(regexp_replace(todo, E'[\\\\n\\\\r]+', '', 'g')) as todo,\n        trim(regexp_replace(sheet_name, E'[\\\\n\\\\r]+', '', 'g')) as sheet_name\n    from\n        source\n    where\n        coalesce\n        (\n            nullif(illumina_id, ''),\n            nullif(run, ''),\n            nullif(\"timestamp\", ''),\n            nullif(subject_id, ''),\n            nullif(sample_id, ''),\n            nullif(library_id, ''),\n            nullif(external_subject_id, ''),\n            nullif(external_sample_id, ''),\n            nullif(external_library_id, ''),\n            nullif(sample_name, ''),\n            nullif(project_owner, ''),\n            nullif(project_name, ''),\n            nullif(project_custodian, ''),\n            nullif(type, ''),\n            nullif(assay, ''),\n            nullif(override_cycles, ''),\n            nullif(phenotype, ''),\n            nullif(source, ''),\n            nullif(quality, ''),\n            nullif(topup, ''),\n            nullif(secondary_analysis, ''),\n            nullif(workflow, ''),\n            nullif(tags, ''),\n            nullif(fastq, ''),\n            nullif(number_fastqs, ''),\n            nullif(results, ''),\n            nullif(trello, ''),\n            nullif(notes, ''),\n            nullif(todo, ''),\n            nullif(sheet_name, '')\n        ) is not null\n\n),\n\ntransformed as (\n\n    select\n        illumina_id,\n        cast(run as integer),\n        cast(\"timestamp\" as date) as \"timestamp\",\n        subject_id,\n        sample_id,\n        library_id,\n        external_subject_id,\n        external_sample_id,\n        external_library_id,\n        sample_name,\n        project_owner,\n        project_name,\n        project_custodian,\n        type,\n        assay,\n        override_cycles,\n        phenotype,\n        source,\n        quality,\n        topup,\n        secondary_analysis,\n        workflow,\n        tags,\n        fastq,\n        number_fastqs,\n        results,\n        trello,\n        notes,\n        todo,\n        sheet_name,\n        cast(\"timestamp\" as timestamptz) + time '11:00' as load_datetime,\n        (select 'Google_LIMS') as record_source\n    from\n        cleaned\n\n),\n\nfinal as (\n\n    select * from transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"psa\".\"spreadsheet_google_lims\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-28T10:30:17.607585Z", "completed_at": "2025-03-28T10:30:17.619947Z"}, {"name": "execute", "started_at": "2025-03-28T10:30:17.620382Z", "completed_at": "2025-03-28T10:30:17.620386Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.014478206634521484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.sat_s3object_by_run", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select\n        s3object_hk,\n        (regexp_match(\"key\", '(?:/)(\\d{8}[a-zA-Z0-9]{8})(?:/)'))[1] as portal_run_id,\n        (regexp_match(\"key\", '(?:/)(\\d{6}_A\\d{5}_\\d{4}_[A-Z0-9]{10})(?:/)'))[1] as sequencing_run_id,\n        regexp_replace(\"key\", '^.+[/\\\\]', '') as filename,\n        split_part(regexp_replace(\"key\", '^.+[/\\\\]', ''), '.', -1) as ext1,\n        split_part(regexp_replace(\"key\", '^.+[/\\\\]', ''), '.', -2) as ext2,\n        split_part(regexp_replace(\"key\", '^.+[/\\\\]', ''), '.', -3) as ext3,\n        load_datetime,\n        record_source\n    from\n        \"orcavault\".\"dcl\".\"hub_s3object\"\n    \n    where\n        cast(load_datetime as timestamptz) > ( select coalesce(max(load_datetime), '1900-01-01') as ldts from \"orcavault\".\"dcl\".\"sat_s3object_by_run\" )\n    \n    group by s3object_hk, portal_run_id, sequencing_run_id\n\n),\n\ntransformed as (\n\n    select\n        s3object_hk,\n        cast('2025-03-28 10:30:16.299930+00:00' as timestamptz) as load_datetime,\n        record_source,\n        encode(sha256(concat(s3object_hk, portal_run_id, sequencing_run_id)::bytea), 'hex') as hash_diff,\n        portal_run_id,\n        sequencing_run_id,\n        filename,\n        ext1,\n        ext2,\n        ext3\n    from\n        source\n\n),\n\nfinal as (\n\n    select\n        cast(s3object_hk as char(64)) as s3object_hk,\n        cast(hash_diff as char(64)) as s3object_sq,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source,\n        cast(hash_diff as char(64)) as hash_diff,\n        cast(portal_run_id as char(16)) as portal_run_id,\n        cast(sequencing_run_id as varchar(255)) as sequencing_run_id,\n        cast(filename as text) as filename,\n        cast(ext1 as varchar(255)) as ext1,\n        cast(ext2 as varchar(255)) as ext2,\n        cast(ext3 as varchar(255)) as ext3\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"dcl\".\"sat_s3object_by_run\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-28T10:30:17.610985Z", "completed_at": "2025-03-28T10:30:17.620135Z"}, {"name": "execute", "started_at": "2025-03-28T10:30:17.620832Z", "completed_at": "2025-03-28T10:30:17.620835Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014697074890136719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.sat_s3object_by_library", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select\n        s3object_hk,\n        (regexp_matches(\"key\", '(?:L\\d{7}|L(?:PRJ|CCR|MDX|TGX)\\d{6}|Undetermined)(?:(?:_topup\\d?)|(?:_rerun\\d?))?', 'g'))[1] as library_id,\n        regexp_replace(\"key\", '^.+[/\\\\]', '') as filename,\n        split_part(regexp_replace(\"key\", '^.+[/\\\\]', ''), '.', -1) as ext1,\n        split_part(regexp_replace(\"key\", '^.+[/\\\\]', ''), '.', -2) as ext2,\n        split_part(regexp_replace(\"key\", '^.+[/\\\\]', ''), '.', -3) as ext3,\n        load_datetime,\n        record_source\n    from\n        \"orcavault\".\"dcl\".\"hub_s3object\"\n    \n    where\n        cast(load_datetime as timestamptz) > ( select coalesce(max(load_datetime), '1900-01-01') as ldts from \"orcavault\".\"dcl\".\"sat_s3object_by_library\" )\n    \n    group by s3object_hk, library_id\n\n),\n\ntransformed as (\n\n    select\n        s3object_hk,\n        cast('2025-03-28 10:30:16.299930+00:00' as timestamptz) as load_datetime,\n        record_source,\n        encode(sha256(concat(s3object_hk, library_id)::bytea), 'hex') as hash_diff,\n        library_id,\n        filename,\n        ext1,\n        ext2,\n        ext3\n    from\n        source\n\n),\n\nfinal as (\n\n    select\n        cast(s3object_hk as char(64)) as s3object_hk,\n        cast(hash_diff as char(64)) as s3object_sq,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source,\n        cast(hash_diff as char(64)) as hash_diff,\n        cast(library_id as varchar(255)) as library_id,\n        cast(filename as text) as filename,\n        cast(ext1 as varchar(255)) as ext1,\n        cast(ext2 as varchar(255)) as ext2,\n        cast(ext3 as varchar(255)) as ext3\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"dcl\".\"sat_s3object_by_library\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-28T10:30:17.613945Z", "completed_at": "2025-03-28T10:30:17.620676Z"}, {"name": "execute", "started_at": "2025-03-28T10:30:17.621484Z", "completed_at": "2025-03-28T10:30:17.621486Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.014911174774169922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.sat_s3object_history", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select\n        *\n    from\n        \"orcavault\".\"ods\".\"file_manager_s3_object\"\n    \n    where\n        cast(event_time as timestamptz) > ( select coalesce(max(load_datetime), '1900-01-01') as ldts from \"orcavault\".\"dcl\".\"sat_s3object_history\" )\n    \n\n),\n\ntransformed as (\n\n    select\n        encode(sha256(concat(bucket, \"key\")::bytea), 'hex') as s3object_hk,\n        cast('2025-03-28 10:30:16.299930+00:00' as timestamptz) as load_datetime,\n        (select 'file_manager_s3_object') as record_source,\n        encode(sha256(concat(\n            s3_object_id,\n            \"size\",\n            e_tag,\n            sha256,\n            last_modified_date,\n            event_time,\n            event_type,\n            version_id,\n            is_delete_marker,\n            sequencer,\n            storage_class,\n            attributes,\n            ingest_id,\n            reason,\n            archive_status\n        )::bytea), 'hex') as hash_diff,\n        *\n    from\n        source\n\n),\n\nfinal as (\n\n    select\n        cast(s3object_hk as char(64)) as s3object_hk,\n        cast(hash_diff as char(64)) as s3object_sq,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source,\n        cast(hash_diff as char(64)) as hash_diff,\n        cast(s3_object_id as uuid) as s3_object_id,\n        cast(\"size\" as bigint) as \"size\",\n        cast(e_tag as varchar(255)) as e_tag,\n        cast(sha256 as text) as sha256,\n        cast(last_modified_date as timestamptz) as last_modified_date,\n        cast(event_time as timestamptz) as event_time,\n        cast(event_type as varchar(255)) as event_type,\n        cast(version_id as varchar(255)) as version_id,\n        cast(is_delete_marker as boolean) as is_delete_marker,\n        cast(sequencer as varchar(255)) as sequencer,\n        cast(storage_class as varchar(255)) as storage_class,\n        cast(attributes as jsonb) as attributes,\n        cast(ingest_id as uuid) as ingest_id,\n        cast(reason as varchar(255)) as reason,\n        cast(archive_status as varchar(255)) as archive_status\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"dcl\".\"sat_s3object_history\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-28T10:30:17.616959Z", "completed_at": "2025-03-28T10:30:17.621097Z"}, {"name": "execute", "started_at": "2025-03-28T10:30:17.621960Z", "completed_at": "2025-03-28T10:30:17.621963Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.014789819717407227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.sat_s3object_portal", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select\n        id,\n        bucket,\n        \"key\",\n        \"size\",\n        e_tag,\n        cast(last_modified_date as timestamptz) as last_modified_date\n    from\n        \"orcavault\".\"ods\".\"data_portal_s3object\"\n    \n    where\n        cast(last_modified_date as timestamptz) > ( select coalesce(max(load_datetime), '1900-01-01') as ldts from \"orcavault\".\"dcl\".\"sat_s3object_portal\" )\n    \n\n),\n\ntransformed as (\n\n    select\n        encode(sha256(concat(bucket, \"key\")::bytea), 'hex') as s3object_hk,\n        cast('2025-03-28 10:30:16.299930+00:00' as timestamptz) as load_datetime,\n        (select 'data_portal_s3object') as record_source,\n        encode(sha256(concat(id, \"size\", e_tag, last_modified_date)::bytea), 'hex') as hash_diff,\n        id,\n        \"size\",\n        e_tag,\n        last_modified_date,\n        (select 0) as is_deleted\n    from\n        source\n\n),\n\nfinal as (\n\n    select\n        cast(s3object_hk as char(64)) as s3object_hk,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source,\n        cast(hash_diff as char(64)) as hash_diff,\n        cast(id as bigint) as id,\n        cast(\"size\" as bigint) as \"size\",\n        cast(e_tag as varchar(255)) as e_tag,\n        cast(last_modified_date as timestamptz) as last_modified_date,\n        cast(is_deleted as smallint) as is_deleted\n    from\n        transformed\n\n)\n\nselect * from final\n\nunion\n    select\n        cast(t.s3object_hk as char(64)) as s3object_hk,\n        cast(t.load_datetime as timestamptz) as load_datetime,\n        cast(t.record_source as varchar(255)) as record_source,\n        cast(t.hash_diff as char(64)) as hash_diff,\n        cast(t.id as bigint) as id,\n        cast(t.\"size\" as bigint) as \"size\",\n        cast(t.e_tag as varchar(255)) as e_tag,\n        cast(t.last_modified_date as timestamptz) as last_modified_date,\n        cast((select 1) as smallint) as is_deleted\n    from \"orcavault\".\"dcl\".\"sat_s3object_portal\" t\n        left join \"orcavault\".\"ods\".\"data_portal_s3object\" s on s.id = t.id\n    where\n        s.id is null and t.is_deleted = 0\n", "relation_name": "\"orcavault\".\"dcl\".\"sat_s3object_portal\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-28T10:30:17.625858Z", "completed_at": "2025-03-28T10:30:17.632714Z"}, {"name": "execute", "started_at": "2025-03-28T10:30:17.633082Z", "completed_at": "2025-03-28T10:30:17.633085Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010546207427978516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.sat_workflow_run_detail", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select\n        wfr.portal_run_id as portal_run_id,\n        wfr.orcabus_id as workflow_run_orcabus_id,\n        wfr.execution_id as workflow_run_execution_id,\n        wfr.workflow_run_name as workflow_run_name,\n        wfr.comment as workflow_run_comment,\n        wfl.orcabus_id as workflow_orcabus_id,\n        wfl.workflow_name as workflow_name,\n        wfl.workflow_version as workflow_version,\n        wfl.execution_engine as workflow_execution_engine,\n        wfl.execution_engine_pipeline_id as workflow_execution_engine_pipeline_id,\n        stt.orcabus_id as state_orcabus_id,\n        stt.status as state_status,\n        stt.timestamp as state_timestamp,\n        stt.comment as state_comment,\n        pld.orcabus_id as payload_orcabus_id,\n        pld.payload_ref_id as payload_ref_id,\n        pld.version as payload_version,\n        pld.data as payload_data\n    from \"orcavault\".\"ods\".\"workflow_manager_workflowrun\" wfr\n        join \"orcavault\".\"ods\".\"workflow_manager_workflow\" wfl on wfl.orcabus_id = wfr.workflow_id\n        join \"orcavault\".\"ods\".\"workflow_manager_state\" stt on stt.workflow_run_id = wfr.orcabus_id\n        join \"orcavault\".\"ods\".\"workflow_manager_payload\" pld on pld.orcabus_id = stt.payload_id\n    \n    where\n        cast(stt.timestamp as timestamptz) > ( select coalesce(max(load_datetime), '1900-01-01') as ldts from \"orcavault\".\"dcl\".\"sat_workflow_run_detail\" )\n    \n\n),\n\ntransformed as (\n\n    select\n        encode(sha256(cast(portal_run_id as bytea)), 'hex') as workflow_run_hk,\n        encode(sha256(cast(state_orcabus_id as bytea)), 'hex') as workflow_run_sq,\n        cast('2025-03-28 10:30:16.299930+00:00' as timestamptz) as load_datetime,\n        (select 'workflow_manager') as record_source,\n        encode(sha256(concat(\n            workflow_run_orcabus_id,\n            workflow_run_execution_id,\n            workflow_run_name,\n            workflow_run_comment,\n            workflow_orcabus_id,\n            workflow_name,\n            workflow_version,\n            workflow_execution_engine,\n            workflow_execution_engine_pipeline_id,\n            state_orcabus_id,\n            state_status,\n            state_timestamp,\n            state_comment,\n            payload_orcabus_id,\n            payload_ref_id,\n            payload_version\n        )::bytea), 'hex') as hash_diff,\n        workflow_run_orcabus_id,\n        workflow_run_execution_id,\n        workflow_run_name,\n        workflow_run_comment,\n        workflow_orcabus_id,\n        workflow_name,\n        workflow_version,\n        workflow_execution_engine,\n        workflow_execution_engine_pipeline_id,\n        state_orcabus_id,\n        state_status,\n        state_timestamp,\n        state_comment,\n        payload_orcabus_id,\n        payload_ref_id,\n        payload_version,\n        payload_data\n    from\n        source\n\n),\n\nfinal as (\n\n    select\n        cast(workflow_run_hk as char(64)) as workflow_run_hk,\n        cast(workflow_run_sq as char(64)) as workflow_run_sq,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source,\n        cast(hash_diff as char(64)) as hash_diff,\n        cast(workflow_run_orcabus_id as char(26)) as workflow_run_orcabus_id,\n        cast(workflow_run_execution_id as varchar(255)) as workflow_run_execution_id,\n        cast(workflow_run_name as varchar(255)) as workflow_run_name,\n        cast(workflow_run_comment as varchar(255)) as workflow_run_comment,\n        cast(workflow_orcabus_id as char(26)) as workflow_orcabus_id,\n        cast(workflow_name as varchar(255)) as workflow_name,\n        cast(workflow_version as varchar(255)) as workflow_version,\n        cast(workflow_execution_engine as varchar(255)) as workflow_execution_engine,\n        cast(workflow_execution_engine_pipeline_id as varchar(255)) as workflow_execution_engine_pipeline_id,\n        cast(state_orcabus_id as varchar(26)) as state_orcabus_id,\n        cast(state_status as varchar(255)) as state_status,\n        cast(state_timestamp as timestamptz) as state_timestamp,\n        cast(state_comment as varchar(255)) as state_comment,\n        cast(payload_orcabus_id as char(26)) as payload_orcabus_id,\n        cast(payload_ref_id as varchar(255)) as payload_ref_id,\n        cast(payload_version as varchar(255)) as payload_version,\n        cast(payload_data as jsonb) as payload_data\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"dcl\".\"sat_workflow_run_detail\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-28T10:30:17.623571Z", "completed_at": "2025-03-28T10:30:17.632892Z"}, {"name": "execute", "started_at": "2025-03-28T10:30:17.633397Z", "completed_at": "2025-03-28T10:30:17.633399Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011204004287719727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.sat_workflow_run_comment", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select\n        wfr.portal_run_id as portal_run_id,\n        cmt.orcabus_id as orcabus_id,\n        cmt.comment as comment,\n        cmt.created_at as created_at,\n        cmt.created_by as created_by,\n        cmt.updated_at as updated_at,\n        cmt.is_deleted as is_deleted\n    from \"orcavault\".\"ods\".\"workflow_manager_workflowrun\" wfr\n        join \"orcavault\".\"ods\".\"workflow_manager_workflowruncomment\" cmt on cmt.workflow_run_id = wfr.orcabus_id\n    \n    where\n        cast(cmt.created_at as timestamptz) > ( select coalesce(max(load_datetime), '1900-01-01') as ldts from \"orcavault\".\"dcl\".\"sat_workflow_run_comment\" )\n    \n\n),\n\ntransformed as (\n\n    select\n        encode(sha256(cast(portal_run_id as bytea)), 'hex') as workflow_run_hk,\n        cast('2025-03-28 10:30:16.299930+00:00' as timestamptz) as load_datetime,\n        (select 'workflow_manager_workflowruncomment') as record_source,\n        encode(sha256(concat(\n            orcabus_id,\n            comment,\n            created_at,\n            created_by,\n            updated_at,\n            is_deleted\n        )::bytea), 'hex') as hash_diff,\n        orcabus_id,\n        comment,\n        created_at,\n        created_by,\n        updated_at,\n        is_deleted\n    from\n        source\n\n),\n\nfinal as (\n\n    select\n        cast(workflow_run_hk as char(64)) as workflow_run_hk,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source,\n        cast(hash_diff as char(64)) as hash_diff,\n        cast(orcabus_id as char(26)) as orcabus_id,\n        cast(comment as text) as comment,\n        cast(created_at as timestamptz) as created_at,\n        cast(created_by as varchar(255)) as created_by,\n        cast(updated_at as timestamptz) as updated_at,\n        cast(is_deleted as boolean) as is_deleted\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"dcl\".\"sat_workflow_run_comment\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-28T10:30:17.630006Z", "completed_at": "2025-03-28T10:30:17.633663Z"}, {"name": "execute", "started_at": "2025-03-28T10:30:17.634324Z", "completed_at": "2025-03-28T10:30:17.634327Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.010953903198242188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.hub_experiment", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select experiment_id from \"orcavault\".\"ods\".\"data_portal_labmetadata\"\n    union\n    select experiment_id from \"orcavault\".\"psa\".\"spreadsheet_library_tracking_metadata\"\n\n),\n\ncleaned as (\n\n    select\n        distinct trim(experiment_id) as experiment_id\n    from\n        source\n    where\n        experiment_id is not null and experiment_id <> ''\n\n),\n\ndifferentiated as (\n\n    select experiment_id from cleaned\n    \n    except\n    select experiment_id from \"orcavault\".\"dcl\".\"hub_experiment\"\n    \n\n),\n\ntransformed as (\n\n    select\n        encode(sha256(cast(experiment_id as bytea)), 'hex') as experiment_hk,\n        experiment_id,\n        cast('2025-03-28 10:30:16.299930+00:00' as timestamptz) as load_datetime,\n        (select 'lab') as record_source,\n        cast('2025-03-28 10:30:16.299930+00:00' as timestamptz) as last_seen_datetime\n    from\n        differentiated\n\n),\n\nfinal as (\n\n    select\n        cast(experiment_hk as char(64)) as experiment_hk,\n        cast(experiment_id as varchar(255)) as experiment_id,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source,\n        cast(last_seen_datetime as timestamptz) as last_seen_datetime\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"dcl\".\"hub_experiment\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-28T10:30:17.628273Z", "completed_at": "2025-03-28T10:30:17.633980Z"}, {"name": "execute", "started_at": "2025-03-28T10:30:17.634782Z", "completed_at": "2025-03-28T10:30:17.634784Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011726140975952148, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.sat_workflow_run_portal", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select\n        id,\n        type_name,\n        wfr_name,\n        wfr_id,\n        wfl_id,\n        wfv_id,\n        version,\n        start as start_datetime,\n        \"end\" as end_datetime,\n        end_status,\n        \"input\" as input_json,\n        \"output\" as output_json,\n        portal_run_id\n    from\n        \"orcavault\".\"ods\".\"data_portal_workflow\"\n    \n    where\n        cast(start as timestamptz) > ( select coalesce(max(load_datetime), '1900-01-01') as ldts from \"orcavault\".\"dcl\".\"sat_workflow_run_portal\" )\n    \n\n),\n\ntransformed as (\n\n    select\n        encode(sha256(cast(portal_run_id as bytea)), 'hex') as workflow_run_hk,\n        cast('2025-03-28 10:30:16.299930+00:00' as timestamptz) as load_datetime,\n        (select 'data_portal_workflow') as record_source,\n        encode(sha256(concat(\n                id,\n                type_name,\n                wfr_name,\n                wfr_id,\n                wfl_id,\n                wfv_id,\n                version,\n                start_datetime,\n                end_datetime,\n                end_status\n        )::bytea), 'hex') as hash_diff,\n        id,\n        type_name,\n        wfr_name,\n        wfr_id,\n        wfl_id,\n        wfv_id,\n        version,\n        start_datetime,\n        end_datetime,\n        end_status,\n        input_json,\n        output_json\n    from\n        source\n\n),\n\nfinal as (\n\n    select\n        cast(workflow_run_hk as char(64)) as workflow_run_hk,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source,\n        cast(hash_diff as char(64)) as hash_diff,\n        cast(id as bigint) as id,\n        cast(type_name as varchar(255)) as type_name,\n        cast(wfr_name as text) as wfr_name,\n        cast(wfr_id as varchar(255)) as wfr_id,\n        cast(wfl_id as varchar(255)) as wfl_id,\n        cast(wfv_id as varchar(255)) as wfv_id,\n        cast(version as varchar(255)) as version,\n        cast(start_datetime as timestamptz) as start_datetime,\n        cast(end_datetime as timestamptz) as end_datetime,\n        cast(end_status as varchar(255)) as end_status,\n        cast(input_json as jsonb) as input_json,\n        cast(output_json as jsonb) as output_json\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"dcl\".\"sat_workflow_run_portal\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-28T10:30:17.636020Z", "completed_at": "2025-03-28T10:30:17.648583Z"}, {"name": "execute", "started_at": "2025-03-28T10:30:17.648908Z", "completed_at": "2025-03-28T10:30:17.648912Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01435995101928711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.hub_external_sample", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select external_sample_id from \"orcavault\".\"ods\".\"data_portal_labmetadata\"\n    union\n    select external_sample_id from \"orcavault\".\"ods\".\"data_portal_limsrow\"\n    union\n    select external_sample_id from \"orcavault\".\"ods\".\"metadata_manager_sample\"\n    union\n    select external_sample_id from \"orcavault\".\"psa\".\"spreadsheet_library_tracking_metadata\"\n    union\n    select external_sample_id from \"orcavault\".\"psa\".\"spreadsheet_google_lims\"\n\n),\n\ncleaned as (\n\n    select * from source where external_sample_id is not null and external_sample_id <> ''\n\n),\n\ndifferentiated as (\n\n    select external_sample_id from cleaned\n    \n    except\n    select external_sample_id from \"orcavault\".\"dcl\".\"hub_external_sample\"\n    \n\n),\n\ntransformed as (\n\n    select\n        encode(sha256(cast(external_sample_id as bytea)), 'hex') as external_sample_hk,\n        external_sample_id,\n        cast('2025-03-28 10:30:16.299930+00:00' as timestamptz) as load_datetime,\n        (select 'lab') as record_source,\n        cast('2025-03-28 10:30:16.299930+00:00' as timestamptz) as last_seen_datetime\n    from\n        differentiated\n\n),\n\nfinal as (\n\n    select\n        cast(external_sample_hk as char(64)) as external_sample_hk,\n        cast(external_sample_id as varchar(255)) as external_sample_id,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source,\n        cast(last_seen_datetime as timestamptz) as last_seen_datetime\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"dcl\".\"hub_external_sample\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-28T10:30:17.638770Z", "completed_at": "2025-03-28T10:30:17.648761Z"}, {"name": "execute", "started_at": "2025-03-28T10:30:17.649222Z", "completed_at": "2025-03-28T10:30:17.649224Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.014230012893676758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.hub_external_subject", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select external_subject_id from \"orcavault\".\"ods\".\"data_portal_labmetadata\"\n    union\n    select external_subject_id from \"orcavault\".\"ods\".\"data_portal_limsrow\"\n    union\n    select subject_id as external_subject_id from \"orcavault\".\"ods\".\"metadata_manager_subject\"\n    union\n    select external_subject_id from \"orcavault\".\"psa\".\"spreadsheet_library_tracking_metadata\"\n    union\n    select external_subject_id from \"orcavault\".\"psa\".\"spreadsheet_google_lims\"\n\n),\n\ncleaned as (\n\n    select * from source where external_subject_id is not null and external_subject_id <> ''\n\n),\n\ndifferentiated as (\n\n    select external_subject_id from cleaned\n    \n    except\n    select external_subject_id from \"orcavault\".\"dcl\".\"hub_external_subject\"\n    \n\n),\n\ntransformed as (\n\n    select\n        encode(sha256(cast(external_subject_id as bytea)), 'hex') as external_subject_hk,\n        external_subject_id,\n        cast('2025-03-28 10:30:16.299930+00:00' as timestamptz) as load_datetime,\n        (select 'lab') as record_source,\n        cast('2025-03-28 10:30:16.299930+00:00' as timestamptz) as last_seen_datetime\n    from\n        differentiated\n\n),\n\nfinal as (\n\n    select\n        cast(external_subject_hk as char(64)) as external_subject_hk,\n        cast(external_subject_id as varchar(255)) as external_subject_id,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source,\n        cast(last_seen_datetime as timestamptz) as last_seen_datetime\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"dcl\".\"hub_external_subject\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-28T10:30:17.643125Z", "completed_at": "2025-03-28T10:30:17.649493Z"}, {"name": "execute", "started_at": "2025-03-28T10:30:17.650155Z", "completed_at": "2025-03-28T10:30:17.650158Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.014334917068481445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.hub_internal_subject", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select subject_id as internal_subject_id from \"orcavault\".\"ods\".\"data_portal_labmetadata\"\n    union\n    select subject_id as internal_subject_id from \"orcavault\".\"ods\".\"data_portal_limsrow\"\n    union\n    select individual_id as internal_subject_id from \"orcavault\".\"ods\".\"metadata_manager_individual\"\n    union\n    select subject_id as internal_subject_id from \"orcavault\".\"psa\".\"spreadsheet_library_tracking_metadata\"\n    union\n    select subject_id as internal_subject_id from \"orcavault\".\"psa\".\"spreadsheet_google_lims\"\n\n),\n\ncleaned as (\n\n    select * from source where internal_subject_id is not null and internal_subject_id <> ''\n\n),\n\ndifferentiated as (\n\n    select internal_subject_id from cleaned\n    \n    except\n    select internal_subject_id from \"orcavault\".\"dcl\".\"hub_internal_subject\"\n    \n\n),\n\ntransformed as (\n\n    select\n        encode(sha256(cast(internal_subject_id as bytea)), 'hex') as internal_subject_hk,\n        internal_subject_id,\n        cast('2025-03-28 10:30:16.299930+00:00' as timestamptz) as load_datetime,\n        (select 'lab') as record_source,\n        cast('2025-03-28 10:30:16.299930+00:00' as timestamptz) as last_seen_datetime\n    from\n        differentiated\n\n),\n\nfinal as (\n\n    select\n        cast(internal_subject_hk as char(64)) as internal_subject_hk,\n        cast(internal_subject_id as varchar(255)) as internal_subject_id,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source,\n        cast(last_seen_datetime as timestamptz) as last_seen_datetime\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"dcl\".\"hub_internal_subject\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-28T10:30:17.645763Z", "completed_at": "2025-03-28T10:30:17.649823Z"}, {"name": "execute", "started_at": "2025-03-28T10:30:17.650574Z", "completed_at": "2025-03-28T10:30:17.650576Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.012023210525512695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.hub_library", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select library_id from \"orcavault\".\"ods\".\"data_portal_labmetadata\"\n    union\n    select library_id from \"orcavault\".\"ods\".\"data_portal_limsrow\"\n    union\n    select library_id from \"orcavault\".\"ods\".\"metadata_manager_library\"\n    union\n    select library_id from \"orcavault\".\"psa\".\"spreadsheet_library_tracking_metadata\"\n    union\n    select library_id from \"orcavault\".\"psa\".\"spreadsheet_google_lims\"\n\n),\n\ncleaned as (\n\n    select * from source where library_id is not null and library_id <> ''\n\n),\n\ndifferentiated as (\n\n    select library_id from cleaned\n    \n    except\n    select library_id from \"orcavault\".\"dcl\".\"hub_library\"\n    \n\n),\n\ntransformed as (\n\n    select\n        encode(sha256(cast(library_id as bytea)), 'hex') as library_hk,\n        library_id,\n        cast('2025-03-28 10:30:16.299930+00:00' as timestamptz) as load_datetime,\n        (select 'lab') as record_source,\n        cast('2025-03-28 10:30:16.299930+00:00' as timestamptz) as last_seen_datetime\n    from\n        differentiated\n\n),\n\nfinal as (\n\n    select\n        cast(library_hk as char(64)) as library_hk,\n        cast(library_id as varchar(255)) as library_id,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source,\n        cast(last_seen_datetime as timestamptz) as last_seen_datetime\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"dcl\".\"hub_library\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-28T10:30:17.651809Z", "completed_at": "2025-03-28T10:30:17.662523Z"}, {"name": "execute", "started_at": "2025-03-28T10:30:17.662761Z", "completed_at": "2025-03-28T10:30:17.662764Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012388944625854492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.hub_owner", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select project_owner as owner_id from \"orcavault\".\"ods\".\"data_portal_labmetadata\"\n    union\n    select project_owner as owner_id from \"orcavault\".\"ods\".\"data_portal_limsrow\"\n    union\n    select contact_id as owner_id from \"orcavault\".\"ods\".\"metadata_manager_contact\"\n    union\n    select project_owner as owner_id from \"orcavault\".\"psa\".\"spreadsheet_library_tracking_metadata\"\n    union\n    select project_owner as owner_id from \"orcavault\".\"psa\".\"spreadsheet_google_lims\"\n\n),\n\ncleaned as (\n\n    select * from source where owner_id is not null and owner_id <> ''\n\n),\n\ndifferentiated as (\n\n    select owner_id from cleaned\n    \n    except\n    select owner_id from \"orcavault\".\"dcl\".\"hub_owner\"\n    \n\n),\n\ntransformed as (\n\n    select\n        encode(sha256(cast(owner_id as bytea)), 'hex') as owner_hk,\n        owner_id,\n        cast('2025-03-28 10:30:16.299930+00:00' as timestamptz) as load_datetime,\n        (select 'lab') as record_source,\n        cast('2025-03-28 10:30:16.299930+00:00' as timestamptz) as last_seen_datetime\n    from\n        differentiated\n\n),\n\nfinal as (\n\n    select\n        cast(owner_hk as char(64)) as owner_hk,\n        cast(owner_id as varchar(255)) as owner_id,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source,\n        cast(last_seen_datetime as timestamptz) as last_seen_datetime\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"dcl\".\"hub_owner\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-28T10:30:17.654486Z", "completed_at": "2025-03-28T10:30:17.663049Z"}, {"name": "execute", "started_at": "2025-03-28T10:30:17.663415Z", "completed_at": "2025-03-28T10:30:17.663417Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.012629985809326172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.hub_project", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select project_name as project_id from \"orcavault\".\"ods\".\"data_portal_labmetadata\"\n    union\n    select project_name as project_id from \"orcavault\".\"ods\".\"data_portal_limsrow\"\n    union\n    select project_id from \"orcavault\".\"ods\".\"metadata_manager_project\"\n    union\n    select project_name as project_id from \"orcavault\".\"psa\".\"spreadsheet_library_tracking_metadata\"\n    union\n    select project_name as project_id from \"orcavault\".\"psa\".\"spreadsheet_google_lims\"\n\n),\n\ncleaned as (\n\n    select * from source where project_id is not null and project_id <> ''\n\n),\n\ndifferentiated as (\n\n    select project_id from cleaned\n    \n    except\n    select project_id from \"orcavault\".\"dcl\".\"hub_project\"\n    \n\n),\n\ntransformed as (\n\n    select\n        encode(sha256(cast(project_id as bytea)), 'hex') as project_hk,\n        project_id,\n        cast('2025-03-28 10:30:16.299930+00:00' as timestamptz) as load_datetime,\n        (select 'lab') as record_source,\n        cast('2025-03-28 10:30:16.299930+00:00' as timestamptz) as last_seen_datetime\n    from\n        differentiated\n\n),\n\nfinal as (\n\n    select\n        cast(project_hk as char(64)) as project_hk,\n        cast(project_id as varchar(255)) as project_id,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source,\n        cast(last_seen_datetime as timestamptz) as last_seen_datetime\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"dcl\".\"hub_project\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-28T10:30:17.659976Z", "completed_at": "2025-03-28T10:30:17.663683Z"}, {"name": "execute", "started_at": "2025-03-28T10:30:17.664308Z", "completed_at": "2025-03-28T10:30:17.664310Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.010017633438110352, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.hub_sequencing_run", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select instrument_run_id as sequencing_run_id from \"orcavault\".\"ods\".\"data_portal_libraryrun\"\n    union\n    select instrument_run_id as sequencing_run_id from \"orcavault\".\"ods\".\"data_portal_sequence\"\n    union\n    select instrument_run_id as sequencing_run_id from \"orcavault\".\"ods\".\"data_portal_sequencerun\"\n    union\n    select instrument_run_id as sequencing_run_id from \"orcavault\".\"ods\".\"sequence_run_manager_sequence\"\n    union\n    select illumina_id as sequencing_run_id from \"orcavault\".\"ods\".\"data_portal_limsrow\"\n    union\n    select illumina_id as sequencing_run_id from \"orcavault\".\"psa\".\"spreadsheet_google_lims\"\n\n),\n\ncleaned as (\n\n    select * from source where sequencing_run_id is not null and sequencing_run_id <> ''\n\n),\n\ndifferentiated as (\n\n    select sequencing_run_id from cleaned\n    \n    except\n    select sequencing_run_id from \"orcavault\".\"dcl\".\"hub_sequencing_run\"\n    \n\n),\n\ntransformed as (\n\n    select\n        encode(sha256(cast(sequencing_run_id as bytea)), 'hex') as sequencing_run_hk,\n        sequencing_run_id,\n        cast('2025-03-28 10:30:16.299930+00:00' as timestamptz) as load_datetime,\n        (select 'lab') as record_source,\n        cast('2025-03-28 10:30:16.299930+00:00' as timestamptz) as last_seen_datetime\n    from\n        differentiated\n\n),\n\nfinal as (\n\n    select\n        cast(sequencing_run_hk as char(64)) as sequencing_run_hk,\n        cast(sequencing_run_id as varchar(255)) as sequencing_run_id,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source,\n        cast(last_seen_datetime as timestamptz) as last_seen_datetime\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"dcl\".\"hub_sequencing_run\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-28T10:30:17.657216Z", "completed_at": "2025-03-28T10:30:17.663831Z"}, {"name": "execute", "started_at": "2025-03-28T10:30:17.664562Z", "completed_at": "2025-03-28T10:30:17.664563Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.012934207916259766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.hub_sample", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select sample_id from \"orcavault\".\"ods\".\"data_portal_labmetadata\"\n    union\n    select sample_id from \"orcavault\".\"ods\".\"data_portal_limsrow\"\n    union\n    select sample_id from \"orcavault\".\"ods\".\"metadata_manager_sample\"\n    union\n    select sample_id from \"orcavault\".\"psa\".\"spreadsheet_library_tracking_metadata\"\n    union\n    select sample_id from \"orcavault\".\"psa\".\"spreadsheet_google_lims\"\n\n),\n\ncleaned as (\n\n    select * from source where sample_id is not null and sample_id <> ''\n\n),\n\ndifferentiated as (\n\n    select sample_id from cleaned\n    \n    except\n    select sample_id from \"orcavault\".\"dcl\".\"hub_sample\"\n    \n\n),\n\ntransformed as (\n\n    select\n        encode(sha256(cast(sample_id as bytea)), 'hex') as sample_hk,\n        sample_id,\n        cast('2025-03-28 10:30:16.299930+00:00' as timestamptz) as load_datetime,\n        (select 'lab') as record_source,\n        cast('2025-03-28 10:30:16.299930+00:00' as timestamptz) as last_seen_datetime\n    from\n        differentiated\n\n),\n\nfinal as (\n\n    select\n        cast(sample_hk as char(64)) as sample_hk,\n        cast(sample_id as varchar(255)) as sample_id,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source,\n        cast(last_seen_datetime as timestamptz) as last_seen_datetime\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"dcl\".\"hub_sample\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-28T10:30:17.665428Z", "completed_at": "2025-03-28T10:30:17.671419Z"}, {"name": "execute", "started_at": "2025-03-28T10:30:17.675711Z", "completed_at": "2025-03-28T10:30:17.675714Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011768817901611328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.sat_s3object_current", "compiled": true, "compiled_code": "\n\nwith incremental as (\n\n    select\n        *\n    from\n        \"orcavault\".\"dcl\".\"sat_s3object_history\"\n    \n    where\n        cast(event_time as timestamptz) > ( select coalesce(max(load_datetime), '1900-01-01') as ldts from \"orcavault\".\"dcl\".\"sat_s3object_current\" )\n    \n\n),\n\nhistory as (\n\n    select\n        h.*,\n        row_number() over (partition by h.s3object_hk, cast(h.event_time as date) order by cast(h.event_time as date) desc) as rank_by_daily\n    from\n        \"orcavault\".\"dcl\".\"sat_s3object_history\" h\n        right outer join incremental i on i.s3object_hk = h.s3object_hk\n\n),\n\ndaily as (\n\n    select * from history where rank_by_daily = 1\n\n),\n\ngrouped as (\n\n    select\n        *,\n        row_number() over (partition by s3object_hk order by cast(event_time as date) desc) as rank_by_group\n    from daily\n\n),\n\ntransformed as (\n\n    select\n        s3object_hk,\n        cast('2025-03-28 10:30:16.299930+00:00' as timestamptz) as load_datetime,\n        record_source,\n        encode(sha256(concat(\n            s3_object_id,\n            \"size\",\n            e_tag,\n            sha256,\n            last_modified_date,\n            storage_class,\n            attributes,\n            ingest_id,\n            reason\n        )::bytea), 'hex') as hash_diff,\n        s3_object_id,\n        \"size\",\n        e_tag,\n        sha256,\n        last_modified_date,\n        storage_class,\n        attributes,\n        ingest_id,\n        reason,\n        cast(event_time as timestamptz) as effective_from,\n        case\n            when (rank_by_group = 1) then\n                cast('9999-12-31' as date)\n            else\n                lag(event_time) over (partition by s3object_hk order by rank_by_group)\n            end as effective_to,\n        case when (rank_by_group = 1) then 1 else 0 end as is_current,\n        case when (event_type = 'Deleted') then 1 else 0 end as is_deleted\n    from\n        grouped\n\n),\n\nfinal as (\n\n    select\n        cast(s3object_hk as char(64)) as s3object_hk,\n        cast(hash_diff as char(64)) as s3object_sq,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source,\n        cast(hash_diff as char(64)) as hash_diff,\n        cast(s3_object_id as uuid) as s3_object_id,\n        cast(\"size\" as bigint) as \"size\",\n        cast(e_tag as varchar(255)) as e_tag,\n        cast(sha256 as text) as sha256,\n        cast(last_modified_date as timestamptz) as last_modified_date,\n        cast(storage_class as varchar(255)) as storage_class,\n        cast(attributes as jsonb) as attributes,\n        cast(ingest_id as uuid) as ingest_id,\n        cast(reason as varchar(255)) as reason,\n        cast(effective_from as timestamptz) as effective_from,\n        cast(effective_to as timestamptz) as effective_to,\n        cast(is_current as smallint) as is_current,\n        cast(is_deleted as smallint) as is_deleted\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"dcl\".\"sat_s3object_current\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-28T10:30:17.669239Z", "completed_at": "2025-03-28T10:30:17.675992Z"}, {"name": "execute", "started_at": "2025-03-28T10:30:17.676393Z", "completed_at": "2025-03-28T10:30:17.676396Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011505842208862305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.sat_subject_mm", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select\n        subject_id as external_subject_id,\n        orcabus_id\n    from\n        \"orcavault\".\"ods\".\"metadata_manager_subject\"\n\n),\n\ncleaned as (\n\n    select\n        trim(regexp_replace(external_subject_id, E'[\\\\n\\\\r]+', '', 'g')) as external_subject_id,\n        trim(regexp_replace(orcabus_id, E'[\\\\n\\\\r]+', '', 'g')) as orcabus_id\n    from\n        source\n\n),\n\nencoded as (\n\n    select\n        encode(sha256(cast(external_subject_id as bytea)), 'hex') as external_subject_hk,\n        encode(sha256(concat(orcabus_id)::bytea), 'hex') as hash_diff,\n        orcabus_id\n    from\n        cleaned\n\n),\n\ndifferentiated as (\n\n    select\n        external_subject_hk,\n        hash_diff\n    from\n        encoded\n    \n    except\n    select\n        external_subject_hk,\n        hash_diff\n    from\n        \"orcavault\".\"dcl\".\"sat_subject_mm\"\n    \n\n),\n\ntransformed as (\n\n    select\n        external_subject_hk,\n        cast('2025-03-28 10:30:16.299930+00:00' as timestamptz) as load_datetime,\n        (select 'metadata_manager_subject') as record_source,\n        hash_diff,\n        orcabus_id\n    from\n        encoded\n    \n    where\n        external_subject_hk in (select external_subject_hk from differentiated)\n    \n\n),\n\nfinal as (\n\n    select\n        cast(external_subject_hk as char(64)) as external_subject_hk,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source,\n        cast(hash_diff as char(64)) as hash_diff,\n        cast(orcabus_id as varchar(255)) as orcabus_id\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"dcl\".\"sat_subject_mm\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-28T10:30:17.673934Z", "completed_at": "2025-03-28T10:30:17.677070Z"}, {"name": "execute", "started_at": "2025-03-28T10:30:17.677696Z", "completed_at": "2025-03-28T10:30:17.677699Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.008677005767822266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.sat_individual_mm", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select\n        individual_id as internal_subject_id,\n        orcabus_id,\n        source\n    from\n        \"orcavault\".\"ods\".\"metadata_manager_individual\"\n\n),\n\ncleaned as (\n\n    select\n        trim(regexp_replace(internal_subject_id, E'[\\\\n\\\\r]+', '', 'g')) as internal_subject_id,\n        trim(regexp_replace(orcabus_id, E'[\\\\n\\\\r]+', '', 'g')) as orcabus_id,\n        trim(regexp_replace(source, E'[\\\\n\\\\r]+', '', 'g')) as source\n    from\n        source\n\n),\n\nencoded as (\n\n    select\n        encode(sha256(cast(internal_subject_id as bytea)), 'hex') as internal_subject_hk,\n        encode(sha256(concat(orcabus_id, source)::bytea), 'hex') as hash_diff,\n        orcabus_id,\n        source\n    from\n        cleaned\n\n),\n\ndifferentiated as (\n\n    select\n        internal_subject_hk,\n        hash_diff\n    from\n        encoded\n    \n    except\n    select\n        internal_subject_hk,\n        hash_diff\n    from\n        \"orcavault\".\"dcl\".\"sat_individual_mm\"\n    \n\n),\n\ntransformed as (\n\n    select\n        internal_subject_hk,\n        cast('2025-03-28 10:30:16.299930+00:00' as timestamptz) as load_datetime,\n        (select 'metadata_manager_individual') as record_source,\n        hash_diff,\n        orcabus_id,\n        source\n    from\n        encoded\n    \n    where\n        internal_subject_hk in (select internal_subject_hk from differentiated)\n    \n\n),\n\nfinal as (\n\n    select\n        cast(internal_subject_hk as char(64)) as internal_subject_hk,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source,\n        cast(hash_diff as char(64)) as hash_diff,\n        cast(orcabus_id as varchar(255)) as orcabus_id,\n        cast(source as varchar(255)) as source\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"dcl\".\"sat_individual_mm\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-28T10:30:17.671584Z", "completed_at": "2025-03-28T10:30:17.677221Z"}, {"name": "execute", "started_at": "2025-03-28T10:30:17.677962Z", "completed_at": "2025-03-28T10:30:17.677965Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.009107828140258789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.link_internal_to_external_subject", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select subject_id as internal_subject_id, external_subject_id from \"orcavault\".\"ods\".\"data_portal_labmetadata\"\n    union\n    select subject_id as internal_subject_id, external_subject_id from \"orcavault\".\"ods\".\"data_portal_limsrow\"\n    union\n    select idv.individual_id as internal_subject_id, sbj.subject_id as external_subject_id from \"orcavault\".\"ods\".\"metadata_manager_subject\" as sbj\n        join \"orcavault\".\"ods\".\"metadata_manager_subjectindividuallink\" as lnk on lnk.subject_orcabus_id = sbj.orcabus_id\n        join \"orcavault\".\"ods\".\"metadata_manager_individual\" as idv on lnk.individual_orcabus_id = idv.orcabus_id\n    union\n    select subject_id as internal_subject_id, external_subject_id from \"orcavault\".\"psa\".\"spreadsheet_library_tracking_metadata\"\n    union\n    select subject_id as internal_subject_id, external_subject_id from \"orcavault\".\"psa\".\"spreadsheet_google_lims\"\n\n),\n\ncleaned as (\n\n    select\n        distinct internal_subject_id, trim(external_subject_id) as external_subject_id\n    from\n        source\n    where\n        (internal_subject_id is not null and internal_subject_id <> '') and\n        (external_subject_id is not null and external_subject_id <> '')\n\n),\n\ndifferentiated as (\n\n    select\n        encode(sha256(cast(external_subject_id as bytea)), 'hex') as external_subject_hk,\n        encode(sha256(cast(internal_subject_id as bytea)), 'hex') as internal_subject_hk\n    from\n        cleaned\n    \n    except\n    select\n        external_subject_hk,\n        internal_subject_hk\n    from\n        \"orcavault\".\"dcl\".\"link_internal_to_external_subject\"\n    \n\n),\n\ntransformed as (\n\n    select\n        external_subject_hk,\n        internal_subject_hk,\n        cast('2025-03-28 10:30:16.299930+00:00' as timestamptz) as load_datetime,\n        (select 'lab') as record_source\n    from\n        differentiated\n\n),\n\nfinal as (\n\n    select\n        cast(encode(sha256(concat(external_subject_hk, internal_subject_hk)::bytea), 'hex') as char(64)) as internal_external_subject_hk,\n        cast(external_subject_hk as char(64)) as external_subject_hk,\n        cast(internal_subject_hk as char(64)) as internal_subject_hk,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"dcl\".\"link_internal_to_external_subject\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-28T10:30:17.678216Z", "completed_at": "2025-03-28T10:30:17.684000Z"}, {"name": "execute", "started_at": "2025-03-28T10:30:17.688456Z", "completed_at": "2025-03-28T10:30:17.688458Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011809110641479492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.link_library_experiment", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select library_id, experiment_id from \"orcavault\".\"ods\".\"data_portal_labmetadata\"\n    union\n    select library_id, experiment_id from \"orcavault\".\"psa\".\"spreadsheet_library_tracking_metadata\"\n\n),\n\ncleaned as (\n\n    select\n        distinct library_id, experiment_id\n    from\n        source\n    where\n        (library_id is not null and library_id <> '') and\n        (experiment_id is not null and experiment_id <> '')\n\n),\n\ndifferentiated as (\n\n    select\n        encode(sha256(cast(experiment_id as bytea)), 'hex') as experiment_hk,\n        encode(sha256(cast(library_id as bytea)), 'hex') as library_hk\n    from\n        cleaned\n    \n    except\n    select\n        experiment_hk,\n        library_hk\n    from\n        \"orcavault\".\"dcl\".\"link_library_experiment\"\n    \n\n),\n\ntransformed as (\n\n    select\n        experiment_hk,\n        library_hk,\n        cast('2025-03-28 10:30:16.299930+00:00' as timestamptz) as load_datetime,\n        (select 'lab') as record_source\n    from\n        differentiated\n\n),\n\nfinal as (\n\n    select\n        cast(encode(sha256(concat(experiment_hk, library_hk)::bytea), 'hex') as char(64)) as library_experiment_hk,\n        cast(experiment_hk as char(64)) as experiment_hk,\n        cast(library_hk as char(64)) as library_hk,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"dcl\".\"link_library_experiment\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-28T10:30:17.680961Z", "completed_at": "2025-03-28T10:30:17.686189Z"}, {"name": "execute", "started_at": "2025-03-28T10:30:17.688760Z", "completed_at": "2025-03-28T10:30:17.688763Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011256933212280273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.link_library_external_sample", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select library_id, external_sample_id from \"orcavault\".\"ods\".\"data_portal_labmetadata\"\n    union\n    select library_id, external_sample_id from \"orcavault\".\"ods\".\"data_portal_limsrow\"\n    union\n    select lib.library_id as library_id, smp.external_sample_id as external_sample_id from \"orcavault\".\"ods\".\"metadata_manager_library\" as lib\n        join \"orcavault\".\"ods\".\"metadata_manager_sample\" as smp on smp.orcabus_id = lib.sample_orcabus_id\n    union\n    select library_id, external_sample_id from \"orcavault\".\"psa\".\"spreadsheet_library_tracking_metadata\"\n    union\n    select library_id, external_sample_id from \"orcavault\".\"psa\".\"spreadsheet_google_lims\"\n\n),\n\ncleaned as (\n\n    select\n        distinct library_id, trim(external_sample_id) as external_sample_id\n    from\n        source\n    where\n        (library_id is not null and library_id <> '') and\n        (external_sample_id is not null and external_sample_id <> '')\n\n),\n\ndifferentiated as (\n\n    select\n        encode(sha256(cast(external_sample_id as bytea)), 'hex') as external_sample_hk,\n        encode(sha256(cast(library_id as bytea)), 'hex') as library_hk\n    from\n        cleaned\n    \n    except\n    select\n        external_sample_hk,\n        library_hk\n    from\n        \"orcavault\".\"dcl\".\"link_library_external_sample\"\n    \n\n),\n\ntransformed as (\n\n    select\n        external_sample_hk,\n        library_hk,\n        cast('2025-03-28 10:30:16.299930+00:00' as timestamptz) as load_datetime,\n        (select 'lab') as record_source\n    from\n        differentiated\n\n),\n\nfinal as (\n\n    select\n        cast(encode(sha256(concat(external_sample_hk, library_hk)::bytea), 'hex') as char(64)) as library_external_sample_hk,\n        cast(external_sample_hk as char(64)) as external_sample_hk,\n        cast(library_hk as char(64)) as library_hk,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"dcl\".\"link_library_external_sample\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-28T10:30:17.684147Z", "completed_at": "2025-03-28T10:30:17.689673Z"}, {"name": "execute", "started_at": "2025-03-28T10:30:17.690334Z", "completed_at": "2025-03-28T10:30:17.690337Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.007103919982910156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.link_library_external_subject", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select library_id, external_subject_id from \"orcavault\".\"ods\".\"data_portal_labmetadata\"\n    union\n    select library_id, external_subject_id from \"orcavault\".\"ods\".\"data_portal_limsrow\"\n    union\n    select lib.library_id as library_id, sbj.subject_id as external_subject_id from \"orcavault\".\"ods\".\"metadata_manager_library\" as lib\n        join \"orcavault\".\"ods\".\"metadata_manager_subject\" as sbj on sbj.orcabus_id = lib.subject_orcabus_id\n    union\n    select library_id, external_subject_id from \"orcavault\".\"psa\".\"spreadsheet_library_tracking_metadata\"\n    union\n    select library_id, external_subject_id from \"orcavault\".\"psa\".\"spreadsheet_google_lims\"\n\n),\n\ncleaned as (\n\n    select\n        distinct library_id, trim(external_subject_id) as external_subject_id\n    from\n        source\n    where\n        (library_id is not null and library_id <> '') and\n        (external_subject_id is not null and external_subject_id <> '')\n\n),\n\ndifferentiated as (\n\n    select\n        encode(sha256(cast(external_subject_id as bytea)), 'hex') as external_subject_hk,\n        encode(sha256(cast(library_id as bytea)), 'hex') as library_hk\n    from\n        cleaned\n    \n    except\n    select\n        external_subject_hk,\n        library_hk\n    from\n        \"orcavault\".\"dcl\".\"link_library_external_subject\"\n    \n\n),\n\ntransformed as (\n\n    select\n        external_subject_hk,\n        library_hk,\n        cast('2025-03-28 10:30:16.299930+00:00' as timestamptz) as load_datetime,\n        (select 'lab') as record_source\n    from\n        differentiated\n\n),\n\nfinal as (\n\n    select\n        cast(encode(sha256(concat(external_subject_hk, library_hk)::bytea), 'hex') as char(64)) as library_external_subject_hk,\n        cast(external_subject_hk as char(64)) as external_subject_hk,\n        cast(library_hk as char(64)) as library_hk,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"dcl\".\"link_library_external_subject\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-28T10:30:17.686365Z", "completed_at": "2025-03-28T10:30:17.690022Z"}, {"name": "execute", "started_at": "2025-03-28T10:30:17.690726Z", "completed_at": "2025-03-28T10:30:17.690728Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0073049068450927734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.link_library_internal_subject", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select library_id, subject_id as internal_subject_id from \"orcavault\".\"ods\".\"data_portal_labmetadata\"\n    union\n    select library_id, subject_id as internal_subject_id from \"orcavault\".\"ods\".\"data_portal_limsrow\"\n    union\n    select library_id, subject_id as internal_subject_id from \"orcavault\".\"psa\".\"spreadsheet_library_tracking_metadata\"\n    union\n    select library_id, subject_id as internal_subject_id from \"orcavault\".\"psa\".\"spreadsheet_google_lims\"\n\n),\n\ncleaned as (\n\n    select\n        distinct library_id, internal_subject_id\n    from\n        source\n    where\n        (library_id is not null and library_id <> '') and\n        (internal_subject_id is not null and internal_subject_id <> '')\n\n),\n\ndifferentiated as (\n\n    select\n        encode(sha256(cast(internal_subject_id as bytea)), 'hex') as internal_subject_hk,\n        encode(sha256(cast(library_id as bytea)), 'hex') as library_hk\n    from\n        cleaned\n    \n    except\n    select\n        internal_subject_hk,\n        library_hk\n    from\n        \"orcavault\".\"dcl\".\"link_library_internal_subject\"\n    \n\n),\n\ntransformed as (\n\n    select\n        internal_subject_hk,\n        library_hk,\n        cast('2025-03-28 10:30:16.299930+00:00' as timestamptz) as load_datetime,\n        (select 'lab') as record_source\n    from\n        differentiated\n\n),\n\nfinal as (\n\n    select\n        cast(encode(sha256(concat(internal_subject_hk, library_hk)::bytea), 'hex') as char(64)) as library_internal_subject_hk,\n        cast(internal_subject_hk as char(64)) as internal_subject_hk,\n        cast(library_hk as char(64)) as library_hk,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"dcl\".\"link_library_internal_subject\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-28T10:30:17.690972Z", "completed_at": "2025-03-28T10:30:17.697816Z"}, {"name": "execute", "started_at": "2025-03-28T10:30:17.700090Z", "completed_at": "2025-03-28T10:30:17.700093Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010629892349243164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.link_library_workflow_run", "compiled": true, "compiled_code": "\n\nwith source1 as (\n\n    select\n        wfr.portal_run_id as portal_run_id,\n        lbr.library_id as library_id\n    from \"orcavault\".\"ods\".\"data_portal_workflow\" wfr\n        join \"orcavault\".\"ods\".\"data_portal_libraryrun_workflows\" lnk on lnk.workflow_id = wfr.id\n        join \"orcavault\".\"ods\".\"data_portal_libraryrun\" lbr on lnk.libraryrun_id = lbr.id\n    \n    where\n        cast(start as timestamptz) > ( select coalesce(max(load_datetime), '1900-01-01') as ldts from \"orcavault\".\"dcl\".\"link_library_workflow_run\" )\n    \n\n),\n\nsource2 as (\n\n    select\n        wfr.portal_run_id as portal_run_id,\n        lib.library_id as library_id\n    from \"orcavault\".\"ods\".\"workflow_manager_workflowrun\" wfr\n        join \"orcavault\".\"ods\".\"workflow_manager_libraryassociation\" lnk on lnk.workflow_run_id = wfr.orcabus_id\n        join \"orcavault\".\"ods\".\"workflow_manager_library\" lib on lnk.library_id = lib.orcabus_id\n    \n    where\n        cast(lnk.association_date as timestamptz) > ( select coalesce(max(load_datetime), '1900-01-01') as ldts from \"orcavault\".\"dcl\".\"link_library_workflow_run\" )\n    \n\n),\n\ncombined as (\n\n    select distinct portal_run_id, library_id from source1\n    union\n    select distinct portal_run_id, library_id from source2\n\n),\n\nencoded as (\n\n    select\n        encode(sha256(cast(portal_run_id as bytea)), 'hex') as workflow_run_hk,\n        encode(sha256(cast(library_id as bytea)), 'hex') as library_hk\n    from\n        combined\n\n),\n\ntransformed as (\n\n    select\n        cast(encode(sha256(concat(workflow_run_hk, library_hk)::bytea), 'hex') as char(64)) as library_workflow_run_hk,\n        workflow_run_hk,\n        library_hk,\n        cast('2025-03-28 10:30:16.299930+00:00' as timestamptz) as load_datetime,\n        (select 'portal_workflow_manager') as record_source\n    from\n        encoded\n\n),\n\nfinal as (\n\n    select\n        cast(library_workflow_run_hk as char(64)) as library_workflow_run_hk,\n        cast(workflow_run_hk as char(64)) as workflow_run_hk,\n        cast(library_hk as char(64)) as library_hk,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"dcl\".\"link_library_workflow_run\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-28T10:30:17.693450Z", "completed_at": "2025-03-28T10:30:17.699892Z"}, {"name": "execute", "started_at": "2025-03-28T10:30:17.700402Z", "completed_at": "2025-03-28T10:30:17.700406Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010586023330688477, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.sat_library_glab", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select distinct\n        record_source,\n        library_id,\n        workflow,\n        phenotype,\n        type,\n        assay,\n        quality,\n        source,\n        truseq_index\n    from\n        \"orcavault\".\"psa\".\"spreadsheet_library_tracking_metadata\"\n\n),\n\ncleaned as (\n\n    select\n        record_source,\n        row_number() over (partition by library_id order by phenotype) as rank,\n        trim(regexp_replace(library_id, E'[\\\\n\\\\r]+', '', 'g')) as library_id,\n        trim(regexp_replace(workflow, E'[\\\\n\\\\r]+', '', 'g')) as workflow,\n        trim(regexp_replace(phenotype, E'[\\\\n\\\\r]+', '', 'g')) as phenotype,\n        trim(regexp_replace(type, E'[\\\\n\\\\r]+', '', 'g')) as type,\n        trim(regexp_replace(assay, E'[\\\\n\\\\r]+', '', 'g')) as assay,\n        trim(regexp_replace(quality, E'[\\\\n\\\\r]+', '', 'g')) as quality,\n        trim(regexp_replace(source, E'[\\\\n\\\\r]+', '', 'g')) as source,\n        trim(regexp_replace(truseq_index, E'[\\\\n\\\\r]+', '', 'g')) as truseq_index\n    from\n        source\n    where\n        library_id is not null or library_id <> ''\n\n),\n\nencoded as (\n\n    select\n        record_source,\n        encode(sha256(cast(library_id as bytea)), 'hex') as library_hk,\n        encode(sha256(concat(workflow, phenotype, type, assay, quality, source, truseq_index)::bytea), 'hex') as hash_diff,\n        workflow,\n        phenotype,\n        type,\n        assay,\n        quality,\n        source,\n        truseq_index\n    from\n        cleaned\n    where\n        rank = 1\n\n),\n\ndifferentiated as (\n\n    select\n        library_hk,\n        hash_diff\n    from\n        encoded\n    \n    except\n    select\n        library_hk,\n        hash_diff\n    from\n        \"orcavault\".\"dcl\".\"sat_library_glab\"\n    \n\n),\n\ntransformed as (\n\n    select\n        library_hk,\n        cast('2025-03-28 10:30:16.299930+00:00' as timestamptz) as load_datetime,\n        record_source,\n        hash_diff,\n        workflow,\n        phenotype,\n        type,\n        assay,\n        quality,\n        source,\n        truseq_index\n    from\n        encoded\n    \n    where\n        library_hk in (select library_hk from differentiated)\n    \n\n),\n\nfinal as (\n\n    select\n        cast(library_hk as char(64)) as library_hk,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source,\n        cast(hash_diff as char(64)) as hash_diff,\n        cast(workflow as varchar(255)) as workflow,\n        cast(phenotype as varchar(255)) as phenotype,\n        cast(type as varchar(255)) as type,\n        cast(assay as varchar(255)) as assay,\n        cast(quality as varchar(255)) as quality,\n        cast(source as varchar(255)) as source,\n        cast(truseq_index as varchar(255)) as truseq_index\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"dcl\".\"sat_library_glab\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-28T10:30:17.696272Z", "completed_at": "2025-03-28T10:30:17.700869Z"}, {"name": "execute", "started_at": "2025-03-28T10:30:17.701570Z", "completed_at": "2025-03-28T10:30:17.701573Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0060307979583740234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.sat_library_glims", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select\n        record_source,\n        library_id,\n        cast(\"timestamp\" as date) as \"timestamp\",\n        illumina_id,\n        workflow,\n        phenotype,\n        type,\n        assay,\n        quality,\n        source\n    from\n        \"orcavault\".\"psa\".\"spreadsheet_google_lims\"\n\n),\n\ncleaned as (\n\n    select\n        record_source,\n        trim(regexp_replace(library_id, E'[\\\\n\\\\r]+', '', 'g')) as library_id,\n        \"timestamp\",\n        row_number() over (partition by library_id, \"timestamp\" order by \"timestamp\" desc, illumina_id desc, workflow desc) as rank,\n        trim(regexp_replace(workflow, E'[\\\\n\\\\r]+', '', 'g')) as workflow,\n        trim(regexp_replace(phenotype, E'[\\\\n\\\\r]+', '', 'g')) as phenotype,\n        trim(regexp_replace(type, E'[\\\\n\\\\r]+', '', 'g')) as type,\n        trim(regexp_replace(assay, E'[\\\\n\\\\r]+', '', 'g')) as assay,\n        trim(regexp_replace(quality, E'[\\\\n\\\\r]+', '', 'g')) as quality,\n        trim(regexp_replace(source, E'[\\\\n\\\\r]+', '', 'g')) as source\n    from\n        source\n    where\n        library_id is not null or library_id <> ''\n\n),\n\ndifferentiated as (\n\n    select\n        *\n    from\n        cleaned\n    where\n        rank = 1\n    \n        and cast(\"timestamp\" as timestamptz) + time '11:00' > ( select coalesce(max(load_datetime), '1900-01-01') as ldts from \"orcavault\".\"dcl\".\"sat_library_glims\" )\n    \n\n),\n\nencoded as (\n\n    select\n        record_source,\n        encode(sha256(cast(library_id as bytea)), 'hex') as library_hk,\n        encode(sha256(concat(\"timestamp\", workflow, phenotype, type, assay, quality, source)::bytea), 'hex') as hash_diff,\n        \"timestamp\",\n        workflow,\n        phenotype,\n        type,\n        assay,\n        quality,\n        source\n    from\n        differentiated\n\n),\n\ntransformed as (\n\n    select\n        library_hk,\n        cast(\"timestamp\" as timestamptz) + time '11:00' as load_datetime,\n        record_source,\n        hash_diff,\n        \"timestamp\",\n        workflow,\n        phenotype,\n        type,\n        assay,\n        quality,\n        source\n    from\n        encoded\n\n),\n\nfinal as (\n\n    select\n        cast(library_hk as char(64)) as library_hk,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source,\n        cast(hash_diff as char(64)) as hash_diff,\n        cast(\"timestamp\" as date) as \"timestamp\",\n        cast(workflow as varchar(255)) as workflow,\n        cast(phenotype as varchar(255)) as phenotype,\n        cast(type as varchar(255)) as type,\n        cast(assay as varchar(255)) as assay,\n        cast(quality as varchar(255)) as quality,\n        cast(source as varchar(255)) as source\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"dcl\".\"sat_library_glims\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-28T10:30:17.697976Z", "completed_at": "2025-03-28T10:30:17.701422Z"}, {"name": "execute", "started_at": "2025-03-28T10:30:17.702144Z", "completed_at": "2025-03-28T10:30:17.702146Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0064029693603515625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.sat_library_mm", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select\n        library_id,\n        orcabus_id,\n        workflow,\n        phenotype,\n        type,\n        assay,\n        quality\n    from\n        \"orcavault\".\"ods\".\"metadata_manager_library\"\n\n),\n\ncleaned as (\n\n    select\n        trim(regexp_replace(library_id, E'[\\\\n\\\\r]+', '', 'g')) as library_id,\n        trim(regexp_replace(orcabus_id, E'[\\\\n\\\\r]+', '', 'g')) as orcabus_id,\n        trim(regexp_replace(workflow, E'[\\\\n\\\\r]+', '', 'g')) as workflow,\n        trim(regexp_replace(phenotype, E'[\\\\n\\\\r]+', '', 'g')) as phenotype,\n        trim(regexp_replace(type, E'[\\\\n\\\\r]+', '', 'g')) as type,\n        trim(regexp_replace(assay, E'[\\\\n\\\\r]+', '', 'g')) as assay,\n        trim(regexp_replace(quality, E'[\\\\n\\\\r]+', '', 'g')) as quality\n    from\n        source\n\n),\n\nencoded as (\n\n    select\n        encode(sha256(cast(library_id as bytea)), 'hex') as library_hk,\n        encode(sha256(concat(orcabus_id, workflow, phenotype, type, assay, quality)::bytea), 'hex') as hash_diff,\n        orcabus_id,\n        workflow,\n        phenotype,\n        type,\n        assay,\n        quality\n    from\n        cleaned\n\n),\n\ndifferentiated as (\n\n    select\n        library_hk,\n        hash_diff\n    from\n        encoded\n    \n    except\n    select\n        library_hk,\n        hash_diff\n    from\n        \"orcavault\".\"dcl\".\"sat_library_mm\"\n    \n\n),\n\ntransformed as (\n\n    select\n        library_hk,\n        cast('2025-03-28 10:30:16.299930+00:00' as timestamptz) as load_datetime,\n        (select 'metadata_manager') as record_source,\n        hash_diff,\n        orcabus_id,\n        workflow,\n        phenotype,\n        type,\n        assay,\n        quality\n    from\n        encoded\n    \n    where\n        library_hk in (select library_hk from differentiated)\n    \n\n),\n\nfinal as (\n\n    select\n        cast(library_hk as char(64)) as library_hk,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source,\n        cast(hash_diff as char(64)) as hash_diff,\n        cast(orcabus_id as varchar(255)) as orcabus_id,\n        cast(workflow as varchar(255)) as workflow,\n        cast(phenotype as varchar(255)) as phenotype,\n        cast(type as varchar(255)) as type,\n        cast(assay as varchar(255)) as assay,\n        cast(quality as varchar(255)) as quality\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"dcl\".\"sat_library_mm\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-28T10:30:17.704854Z", "completed_at": "2025-03-28T10:30:17.710770Z"}, {"name": "execute", "started_at": "2025-03-28T10:30:17.711184Z", "completed_at": "2025-03-28T10:30:17.711187Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009402751922607422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.sat_library_plims", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select\n        library_id,\n        cast(\"timestamp\" as date) as \"timestamp\",\n        illumina_id,\n        workflow,\n        phenotype,\n        type,\n        assay,\n        quality,\n        source\n    from\n        \"orcavault\".\"ods\".\"data_portal_limsrow\"\n\n),\n\ncleaned as (\n\n    select\n        trim(regexp_replace(library_id, E'[\\\\n\\\\r]+', '', 'g')) as library_id,\n        \"timestamp\",\n        row_number() over (partition by library_id, \"timestamp\" order by \"timestamp\" desc, illumina_id desc) as rank,\n        trim(regexp_replace(workflow, E'[\\\\n\\\\r]+', '', 'g')) as workflow,\n        trim(regexp_replace(phenotype, E'[\\\\n\\\\r]+', '', 'g')) as phenotype,\n        trim(regexp_replace(type, E'[\\\\n\\\\r]+', '', 'g')) as type,\n        trim(regexp_replace(assay, E'[\\\\n\\\\r]+', '', 'g')) as assay,\n        trim(regexp_replace(quality, E'[\\\\n\\\\r]+', '', 'g')) as quality,\n        trim(regexp_replace(source, E'[\\\\n\\\\r]+', '', 'g')) as source\n    from\n        source\n\n),\n\ndifferentiated as (\n\n    select\n        *\n    from\n        cleaned\n    where\n        rank = 1\n    \n        and cast(\"timestamp\" as timestamptz) + time '11:00' > ( select coalesce(max(load_datetime), '1900-01-01') as ldts from \"orcavault\".\"dcl\".\"sat_library_plims\" )\n    \n\n),\n\nencoded as (\n\n    select\n        encode(sha256(cast(library_id as bytea)), 'hex') as library_hk,\n        encode(sha256(concat(\"timestamp\", workflow, phenotype, type, assay, quality, source)::bytea), 'hex') as hash_diff,\n        \"timestamp\",\n        workflow,\n        phenotype,\n        type,\n        assay,\n        quality,\n        source\n    from\n        differentiated\n\n),\n\ntransformed as (\n\n    select\n        library_hk,\n        cast(\"timestamp\" as timestamptz) + time '11:00' as load_datetime,\n        (select 'data_portal_limsrow') as record_source,\n        hash_diff,\n        \"timestamp\",\n        workflow,\n        phenotype,\n        type,\n        assay,\n        quality,\n        source\n    from\n        encoded\n\n),\n\nfinal as (\n\n    select\n        cast(library_hk as char(64)) as library_hk,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source,\n        cast(hash_diff as char(64)) as hash_diff,\n        cast(\"timestamp\" as date) as \"timestamp\",\n        cast(workflow as varchar(255)) as workflow,\n        cast(phenotype as varchar(255)) as phenotype,\n        cast(type as varchar(255)) as type,\n        cast(assay as varchar(255)) as assay,\n        cast(quality as varchar(255)) as quality,\n        cast(source as varchar(255)) as source\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"dcl\".\"sat_library_plims\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-28T10:30:17.702713Z", "completed_at": "2025-03-28T10:30:17.710982Z"}, {"name": "execute", "started_at": "2025-03-28T10:30:17.711472Z", "completed_at": "2025-03-28T10:30:17.711475Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010267972946166992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.sat_library_plab", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select\n        library_id,\n        workflow,\n        phenotype,\n        type,\n        assay,\n        quality,\n        source,\n        truseqindex\n    from\n        \"orcavault\".\"ods\".\"data_portal_labmetadata\"\n\n),\n\ncleaned as (\n\n    select\n        trim(regexp_replace(library_id, E'[\\\\n\\\\r]+', '', 'g')) as library_id,\n        trim(regexp_replace(workflow, E'[\\\\n\\\\r]+', '', 'g')) as workflow,\n        trim(regexp_replace(phenotype, E'[\\\\n\\\\r]+', '', 'g')) as phenotype,\n        trim(regexp_replace(type, E'[\\\\n\\\\r]+', '', 'g')) as type,\n        trim(regexp_replace(assay, E'[\\\\n\\\\r]+', '', 'g')) as assay,\n        trim(regexp_replace(quality, E'[\\\\n\\\\r]+', '', 'g')) as quality,\n        trim(regexp_replace(source, E'[\\\\n\\\\r]+', '', 'g')) as source,\n        trim(regexp_replace(truseqindex, E'[\\\\n\\\\r]+', '', 'g')) as truseqindex\n    from\n        source\n\n),\n\nencoded as (\n\n    select\n        encode(sha256(cast(library_id as bytea)), 'hex') as library_hk,\n        encode(sha256(concat(workflow, phenotype, type, assay, quality, source, truseqindex)::bytea), 'hex') as hash_diff,\n        workflow,\n        phenotype,\n        type,\n        assay,\n        quality,\n        source,\n        truseqindex\n    from\n        cleaned\n\n),\n\ndifferentiated as (\n\n    select\n        library_hk,\n        hash_diff\n    from\n        encoded\n    \n    except\n    select\n        library_hk,\n        hash_diff\n    from\n        \"orcavault\".\"dcl\".\"sat_library_plab\"\n    \n\n),\n\ntransformed as (\n\n    select\n        library_hk,\n        cast('2025-03-28 10:30:16.299930+00:00' as timestamptz) as load_datetime,\n        (select 'data_portal_labmetadata') as record_source,\n        hash_diff,\n        workflow,\n        phenotype,\n        type,\n        assay,\n        quality,\n        source,\n        truseqindex\n    from\n        encoded\n    \n    where\n        library_hk in (select library_hk from differentiated)\n    \n\n),\n\nfinal as (\n    select\n        cast(library_hk as char(64)) as library_hk,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source,\n        cast(hash_diff as char(64)) as hash_diff,\n        cast(workflow as varchar(255)) as workflow,\n        cast(phenotype as varchar(255)) as phenotype,\n        cast(type as varchar(255)) as type,\n        cast(assay as varchar(255)) as assay,\n        cast(quality as varchar(255)) as quality,\n        cast(source as varchar(255)) as source,\n        cast(truseqindex as varchar(255)) as truseqindex\n    from\n        transformed\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"dcl\".\"sat_library_plab\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-28T10:30:17.706960Z", "completed_at": "2025-03-28T10:30:17.711768Z"}, {"name": "execute", "started_at": "2025-03-28T10:30:17.712435Z", "completed_at": "2025-03-28T10:30:17.712438Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0077860355377197266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.link_library_ownership", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select library_id, project_owner as owner_id from \"orcavault\".\"ods\".\"data_portal_labmetadata\"\n    union\n    select library_id, project_owner as owner_id from \"orcavault\".\"ods\".\"data_portal_limsrow\"\n    union\n    select library_id, project_owner as owner_id from \"orcavault\".\"psa\".\"spreadsheet_library_tracking_metadata\"\n    union\n    select library_id, project_owner as owner_id from \"orcavault\".\"psa\".\"spreadsheet_google_lims\"\n\n),\n\ncleaned as (\n\n    select\n        distinct library_id, owner_id\n    from\n        source\n    where\n        (library_id is not null and library_id <> '') and\n        (owner_id is not null and owner_id <> '')\n\n),\n\ndifferentiated as (\n\n    select\n        encode(sha256(cast(owner_id as bytea)), 'hex') as owner_hk,\n        encode(sha256(cast(library_id as bytea)), 'hex') as library_hk\n    from\n        cleaned\n    \n    except\n    select\n        owner_hk,\n        library_hk\n    from\n        \"orcavault\".\"dcl\".\"link_library_ownership\"\n    \n\n),\n\ntransformed as (\n\n    select\n        owner_hk,\n        library_hk,\n        cast('2025-03-28 10:30:16.299930+00:00' as timestamptz) as load_datetime,\n        (select 'lab') as record_source\n    from\n        differentiated\n\n),\n\nfinal as (\n\n    select\n        cast(encode(sha256(concat(owner_hk, library_hk)::bytea), 'hex') as char(64)) as library_owner_hk,\n        cast(owner_hk as char(64)) as owner_hk,\n        cast(library_hk as char(64)) as library_hk,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"dcl\".\"link_library_ownership\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-28T10:30:17.709052Z", "completed_at": "2025-03-28T10:30:17.712285Z"}, {"name": "execute", "started_at": "2025-03-28T10:30:17.713035Z", "completed_at": "2025-03-28T10:30:17.713038Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.006645917892456055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.sat_owner_contact", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select\n        *\n    from\n        \"orcavault\".\"ods\".\"metadata_manager_contact\"\n\n),\n\ncleaned as (\n\n    select\n        trim(regexp_replace(contact_id, E'[\\\\n\\\\r]+', '', 'g')) as contact_id,\n        trim(regexp_replace(orcabus_id, E'[\\\\n\\\\r]+', '', 'g')) as orcabus_id,\n        trim(regexp_replace(name, E'[\\\\n\\\\r]+', '', 'g')) as name,\n        trim(regexp_replace(description, E'[\\\\n\\\\r]+', '', 'g')) as description,\n        trim(regexp_replace(email, E'[\\\\n\\\\r]+', '', 'g')) as email\n    from\n        source\n\n),\n\nencoded as (\n\n    select\n        encode(sha256(cast(contact_id as bytea)), 'hex') as owner_hk,\n        encode(sha256(concat(orcabus_id, name, description, email)::bytea), 'hex') as hash_diff,\n        orcabus_id,\n        name,\n        description,\n        email\n    from\n        cleaned\n\n),\n\ndifferentiated as (\n\n    select\n        owner_hk,\n        hash_diff\n    from\n        encoded\n    \n    except\n    select\n        owner_hk,\n        hash_diff\n    from\n        \"orcavault\".\"dcl\".\"sat_owner_contact\"\n    \n\n),\n\ntransformed as (\n\n    select\n        owner_hk,\n        cast('2025-03-28 10:30:16.299930+00:00' as timestamptz) as load_datetime,\n        (select 'metadata_manager_contact') as record_source,\n        hash_diff,\n        orcabus_id,\n        name,\n        description,\n        email\n    from\n        encoded\n    \n    where\n        owner_hk in (select owner_hk from differentiated)\n    \n\n),\n\nfinal as (\n\n    select\n        cast(owner_hk as char(64)) as owner_hk,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source,\n        cast(hash_diff as char(64)) as hash_diff,\n        cast(orcabus_id as varchar(255)) as orcabus_id,\n        cast(name as varchar(255)) as name,\n        cast(description as varchar(255)) as description,\n        cast(email as varchar(255)) as email\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"dcl\".\"sat_owner_contact\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-28T10:30:17.716328Z", "completed_at": "2025-03-28T10:30:17.723050Z"}, {"name": "execute", "started_at": "2025-03-28T10:30:17.723553Z", "completed_at": "2025-03-28T10:30:17.723558Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010755062103271484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.link_project_ownership", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select project_name as project_id, project_owner as owner_id from \"orcavault\".\"ods\".\"data_portal_labmetadata\"\n    union\n    select project_name as project_id, project_owner as owner_id from \"orcavault\".\"ods\".\"data_portal_limsrow\"\n    union\n    select project_id, contact_id as owner_id from \"orcavault\".\"ods\".\"metadata_manager_project\" as prj\n        join \"orcavault\".\"ods\".\"metadata_manager_projectcontactlink\" as lnk on lnk.project_orcabus_id = prj.orcabus_id\n        join \"orcavault\".\"ods\".\"metadata_manager_contact\" as cnt on lnk.contact_orcabus_id = cnt.orcabus_id\n    union\n    select project_name as project_id, project_owner as owner_id from \"orcavault\".\"psa\".\"spreadsheet_library_tracking_metadata\"\n    union\n    select project_name as project_id, project_owner as owner_id from \"orcavault\".\"psa\".\"spreadsheet_google_lims\"\n\n),\n\ncleaned as (\n\n    select\n        distinct trim(project_id) as project_id, trim(owner_id) as owner_id\n    from\n        source\n    where\n        (project_id is not null and project_id <> '') and\n        (owner_id is not null and owner_id <> '')\n\n),\n\ndifferentiated as (\n\n    select\n        encode(sha256(cast(owner_id as bytea)), 'hex') as owner_hk,\n        encode(sha256(cast(project_id as bytea)), 'hex') as project_hk\n    from\n        cleaned\n    \n    except\n    select\n        owner_hk,\n        project_hk\n    from\n        \"orcavault\".\"dcl\".\"link_project_ownership\"\n    \n\n),\n\ntransformed as (\n\n    select\n        owner_hk,\n        project_hk,\n        cast('2025-03-28 10:30:16.299930+00:00' as timestamptz) as load_datetime,\n        (select 'lab') as record_source\n    from\n        differentiated\n\n),\n\nfinal as (\n\n    select\n        cast(encode(sha256(concat(owner_hk, project_hk)::bytea), 'hex') as char(64)) as project_owner_hk,\n        cast(owner_hk as char(64)) as owner_hk,\n        cast(project_hk as char(64)) as project_hk,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"dcl\".\"link_project_ownership\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-28T10:30:17.714064Z", "completed_at": "2025-03-28T10:30:17.723269Z"}, {"name": "execute", "started_at": "2025-03-28T10:30:17.723912Z", "completed_at": "2025-03-28T10:30:17.723915Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011271238327026367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.link_library_project", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select library_id, project_name as project_id from \"orcavault\".\"ods\".\"data_portal_labmetadata\"\n    union\n    select library_id, project_name as project_id from \"orcavault\".\"ods\".\"data_portal_limsrow\"\n    union\n    select lib.library_id as library_id, prj.project_id as project_id from \"orcavault\".\"ods\".\"metadata_manager_library\" as lib\n        join \"orcavault\".\"ods\".\"metadata_manager_libraryprojectlink\" as lnk on lnk.library_orcabus_id = lib.orcabus_id\n        join \"orcavault\".\"ods\".\"metadata_manager_project\" as prj on lnk.project_orcabus_id = prj.orcabus_id\n    union\n    select library_id, project_name as project_id from \"orcavault\".\"psa\".\"spreadsheet_library_tracking_metadata\"\n    union\n    select library_id, project_name as project_id from \"orcavault\".\"psa\".\"spreadsheet_google_lims\"\n\n),\n\ncleaned as (\n\n    select\n        distinct library_id, project_id\n    from\n        source\n    where\n        (library_id is not null and library_id <> '') and\n        (project_id is not null and project_id <> '')\n\n),\n\ndifferentiated as (\n\n    select\n        encode(sha256(cast(project_id as bytea)), 'hex') as project_hk,\n        encode(sha256(cast(library_id as bytea)), 'hex') as library_hk\n    from\n        cleaned\n    \n    except\n    select\n        project_hk,\n        library_hk\n    from\n        \"orcavault\".\"dcl\".\"link_library_project\"\n    \n\n),\n\ntransformed as (\n\n    select\n        project_hk,\n        library_hk,\n        cast('2025-03-28 10:30:16.299930+00:00' as timestamptz) as load_datetime,\n        (select 'lab') as record_source\n    from\n        differentiated\n\n),\n\nfinal as (\n\n    select\n        cast(encode(sha256(concat(project_hk, library_hk)::bytea), 'hex') as char(64)) as library_project_hk,\n        cast(project_hk as char(64)) as project_hk,\n        cast(library_hk as char(64)) as library_hk,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"dcl\".\"link_library_project\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-28T10:30:17.719065Z", "completed_at": "2025-03-28T10:30:17.724206Z"}, {"name": "execute", "started_at": "2025-03-28T10:30:17.724957Z", "completed_at": "2025-03-28T10:30:17.724959Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011091947555541992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.sat_project_mm", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select\n        *\n    from\n        \"orcavault\".\"ods\".\"metadata_manager_project\"\n\n),\n\ncleaned as (\n\n    select\n        trim(regexp_replace(project_id, E'[\\\\n\\\\r]+', '', 'g')) as project_id,\n        trim(regexp_replace(orcabus_id, E'[\\\\n\\\\r]+', '', 'g')) as orcabus_id,\n        trim(regexp_replace(name, E'[\\\\n\\\\r]+', '', 'g')) as name,\n        trim(regexp_replace(description, E'[\\\\n\\\\r]+', '', 'g')) as description\n    from\n        source\n\n),\n\nencoded as (\n\n    select\n        encode(sha256(cast(project_id as bytea)), 'hex') as project_hk,\n        encode(sha256(concat(orcabus_id, name, description)::bytea), 'hex') as hash_diff,\n        orcabus_id,\n        name,\n        description\n    from\n        cleaned\n\n),\n\ndifferentiated as (\n\n    select\n        project_hk,\n        hash_diff\n    from\n        encoded\n    \n    except\n    select\n        project_hk,\n        hash_diff\n    from\n        \"orcavault\".\"dcl\".\"sat_project_mm\"\n    \n\n),\n\ntransformed as (\n\n    select\n        project_hk,\n        cast('2025-03-28 10:30:16.299930+00:00' as timestamptz) as load_datetime,\n        (select 'metadata_manager_project') as record_source,\n        hash_diff,\n        orcabus_id,\n        name,\n        description\n    from\n        encoded\n    \n    where\n        project_hk in (select project_hk from differentiated)\n    \n\n),\n\nfinal as (\n\n    select\n        cast(project_hk as char(64)) as project_hk,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source,\n        cast(hash_diff as char(64)) as hash_diff,\n        cast(orcabus_id as varchar(255)) as orcabus_id,\n        cast(name as varchar(255)) as name,\n        cast(description as varchar(255)) as description\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"dcl\".\"sat_project_mm\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-28T10:30:17.720982Z", "completed_at": "2025-03-28T10:30:17.724370Z"}, {"name": "execute", "started_at": "2025-03-28T10:30:17.725248Z", "completed_at": "2025-03-28T10:30:17.725250Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0067789554595947266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.link_library_sequencing_run", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select library_id, instrument_run_id as sequencing_run_id from \"orcavault\".\"ods\".\"data_portal_libraryrun\"\n    union\n    select library_id, illumina_id as sequencing_run_id from \"orcavault\".\"ods\".\"data_portal_limsrow\"\n    union\n    select library_id, illumina_id as sequencing_run_id from \"orcavault\".\"psa\".\"spreadsheet_google_lims\"\n    union\n    select\n        assoc.library_id as library_id, seq.instrument_run_id as sequencing_run_id\n    from \"orcavault\".\"ods\".\"sequence_run_manager_sequence\" seq\n        join \"orcavault\".\"ods\".\"sequence_run_manager_libraryassociation\" assoc on assoc.sequence_id = seq.orcabus_id\n\n),\n\ncleaned as (\n\n    select\n        distinct library_id, sequencing_run_id\n    from\n        source\n    where\n        (library_id is not null and library_id <> '') and\n        (sequencing_run_id is not null and sequencing_run_id <> '')\n\n),\n\ndifferentiated as (\n\n    select\n        encode(sha256(cast(sequencing_run_id as bytea)), 'hex') as sequencing_run_hk,\n        encode(sha256(cast(library_id as bytea)), 'hex') as library_hk\n    from\n        cleaned\n    \n    except\n    select\n        sequencing_run_hk,\n        library_hk\n    from\n        \"orcavault\".\"dcl\".\"link_library_sequencing_run\"\n    \n\n),\n\ntransformed as (\n\n    select\n        sequencing_run_hk,\n        library_hk,\n        cast('2025-03-28 10:30:16.299930+00:00' as timestamptz) as load_datetime,\n        (select 'lab') as record_source\n    from\n        differentiated\n\n),\n\nfinal as (\n\n    select\n        cast(encode(sha256(concat(sequencing_run_hk, library_hk)::bytea), 'hex') as char(64)) as library_sequencing_run_hk,\n        cast(sequencing_run_hk as char(64)) as sequencing_run_hk,\n        cast(library_hk as char(64)) as library_hk,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"dcl\".\"link_library_sequencing_run\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-28T10:30:17.728927Z", "completed_at": "2025-03-28T10:30:17.736329Z"}, {"name": "execute", "started_at": "2025-03-28T10:30:17.736688Z", "completed_at": "2025-03-28T10:30:17.736692Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01103520393371582, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.sat_sequencing_run_detail", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select\n        instrument_run_id as sequencing_run_id,\n        orcabus_id,\n        status,\n        start_time,\n        end_time,\n        reagent_barcode,\n        flowcell_barcode,\n        ica_project_id,\n        v1pre3_id,\n        sequence_run_id as basespace_run_id,\n        experiment_name\n    from \"orcavault\".\"ods\".\"sequence_run_manager_sequence\"\n    \n    where\n        cast(start_time as timestamptz) > ( select coalesce(max(load_datetime), '1900-01-01') as ldts from \"orcavault\".\"dcl\".\"sat_sequencing_run_detail\" )\n    \n\n),\n\ntransformed as (\n\n    select\n        encode(sha256(cast(sequencing_run_id as bytea)), 'hex') as sequencing_run_hk,\n        cast('2025-03-28 10:30:16.299930+00:00' as timestamptz) as load_datetime,\n        (select 'sequence_run_manager_sequence') as record_source,\n        encode(sha256(concat(\n            orcabus_id,\n            status,\n            start_time,\n            end_time,\n            reagent_barcode,\n            flowcell_barcode,\n            ica_project_id,\n            v1pre3_id,\n            basespace_run_id,\n            experiment_name\n        )::bytea), 'hex') as hash_diff,\n        orcabus_id,\n        status,\n        start_time,\n        end_time,\n        reagent_barcode,\n        flowcell_barcode,\n        ica_project_id,\n        v1pre3_id,\n        basespace_run_id,\n        experiment_name\n    from\n        source\n\n),\n\nfinal as (\n\n    select\n        cast(sequencing_run_hk as char(64)) as sequencing_run_hk,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source,\n        cast(hash_diff as char(64)) as hash_diff,\n        cast(orcabus_id as char(26)) as orcabus_id,\n        cast(status as varchar(255)) as status,\n        cast(start_time as timestamptz) as start_time,\n        cast(end_time as timestamptz) as end_time,\n        cast(reagent_barcode as varchar(255)) as reagent_barcode,\n        cast(flowcell_barcode as varchar(255)) as flowcell_barcode,\n        cast(ica_project_id as varchar(255)) as ica_project_id,\n        cast(v1pre3_id as varchar(255)) as v1pre3_id,\n        cast(basespace_run_id as varchar(255)) as basespace_run_id,\n        cast(experiment_name as varchar(255)) as experiment_name\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"dcl\".\"sat_sequencing_run_detail\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-28T10:30:17.727016Z", "completed_at": "2025-03-28T10:30:17.736515Z"}, {"name": "execute", "started_at": "2025-03-28T10:30:17.737009Z", "completed_at": "2025-03-28T10:30:17.737012Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011526823043823242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.sat_sequencing_run_comment", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select\n        seq.instrument_run_id as sequencing_run_id,\n        cmt.orcabus_id as orcabus_id,\n        cmt.created_by as created_by,\n        cmt.created_at as created_at,\n        cmt.updated_at as updated_at,\n        cmt.is_deleted as is_deleted,\n        cmt.comment as comment\n    from \"orcavault\".\"ods\".\"sequence_run_manager_sequence\" seq\n        join \"orcavault\".\"ods\".\"sequence_run_manager_comment\" cmt on cmt.association_id = seq.orcabus_id\n    \n    where\n        cast(cmt.created_at as timestamptz) > ( select coalesce(max(load_datetime), '1900-01-01') as ldts from \"orcavault\".\"dcl\".\"sat_sequencing_run_comment\" )\n    \n\n),\n\ntransformed as (\n\n    select\n        encode(sha256(cast(sequencing_run_id as bytea)), 'hex') as sequencing_run_hk,\n        cast('2025-03-28 10:30:16.299930+00:00' as timestamptz) as load_datetime,\n        (select 'sequence_run_manager_comment') as record_source,\n        encode(sha256(concat(\n            orcabus_id,\n            created_by,\n            created_at,\n            updated_at,\n            is_deleted\n        )::bytea), 'hex') as hash_diff,\n        orcabus_id,\n        created_by,\n        created_at,\n        updated_at,\n        is_deleted,\n        comment\n    from\n        source\n\n),\n\nfinal as (\n\n    select\n        cast(sequencing_run_hk as char(64)) as sequencing_run_hk,\n        cast(hash_diff as char(64)) as sequencing_run_sq,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source,\n        cast(hash_diff as char(64)) as hash_diff,\n        cast(orcabus_id as char(26)) as orcabus_id,\n        cast(created_by as varchar(255)) as created_by,\n        cast(created_at as timestamptz) as created_at,\n        cast(updated_at as timestamptz) as updated_at,\n        cast(is_deleted as boolean) as is_deleted,\n        cast(comment as text) as comment\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"dcl\".\"sat_sequencing_run_comment\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-28T10:30:17.732363Z", "completed_at": "2025-03-28T10:30:17.737475Z"}, {"name": "execute", "started_at": "2025-03-28T10:30:17.738147Z", "completed_at": "2025-03-28T10:30:17.738150Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011517047882080078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.sat_sequencing_run_samplesheet", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select\n        seq.instrument_run_id as sequencing_run_id,\n        ss.orcabus_id as orcabus_id,\n        ss.association_status as association_status,\n        ss.association_timestamp as association_timestamp,\n        ss.sample_sheet_name as samplesheet_name,\n        ss.sample_sheet_content as samplesheet_content\n    from \"orcavault\".\"ods\".\"sequence_run_manager_sequence\" seq\n        join \"orcavault\".\"ods\".\"sequence_run_manager_samplesheet\" ss on ss.sequence_id = seq.orcabus_id\n    \n    where\n        cast(ss.association_timestamp as timestamptz) > ( select coalesce(max(load_datetime), '1900-01-01') as ldts from \"orcavault\".\"dcl\".\"sat_sequencing_run_samplesheet\" )\n    \n\n),\n\ntransformed as (\n\n    select\n        encode(sha256(cast(sequencing_run_id as bytea)), 'hex') as sequencing_run_hk,\n        cast('2025-03-28 10:30:16.299930+00:00' as timestamptz) as load_datetime,\n        (select 'sequence_run_manager_samplesheet') as record_source,\n        encode(sha256(concat(\n            orcabus_id,\n            association_status,\n            association_timestamp,\n            samplesheet_name\n        )::bytea), 'hex') as hash_diff,\n        orcabus_id,\n        association_status,\n        association_timestamp,\n        samplesheet_name,\n        samplesheet_content\n    from\n        source\n\n),\n\nfinal as (\n\n    select\n        cast(sequencing_run_hk as char(64)) as sequencing_run_hk,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source,\n        cast(hash_diff as char(64)) as hash_diff,\n        cast(orcabus_id as char(26)) as orcabus_id,\n        cast(association_status as varchar(255)) as association_status,\n        cast(association_timestamp as timestamptz) as association_timestamp,\n        cast(samplesheet_name as varchar(255)) as samplesheet_name,\n        cast(samplesheet_content as jsonb) as samplesheet_content\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"dcl\".\"sat_sequencing_run_samplesheet\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-28T10:30:17.734099Z", "completed_at": "2025-03-28T10:30:17.737792Z"}, {"name": "execute", "started_at": "2025-03-28T10:30:17.738573Z", "completed_at": "2025-03-28T10:30:17.738575Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011759042739868164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.link_internal_to_external_sample", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select sample_id, external_sample_id from \"orcavault\".\"ods\".\"data_portal_labmetadata\"\n    union\n    select sample_id, external_sample_id from \"orcavault\".\"ods\".\"data_portal_limsrow\"\n    union\n    select sample_id, external_sample_id from \"orcavault\".\"ods\".\"metadata_manager_sample\"\n    union\n    select sample_id, external_sample_id from \"orcavault\".\"psa\".\"spreadsheet_library_tracking_metadata\"\n    union\n    select sample_id, external_sample_id from \"orcavault\".\"psa\".\"spreadsheet_google_lims\"\n\n),\n\ncleaned as (\n\n    select\n        distinct sample_id, trim(external_sample_id) as external_sample_id\n    from\n        source\n    where\n        (sample_id is not null and sample_id <> '') and\n        (external_sample_id is not null and external_sample_id <> '')\n\n),\n\ndifferentiated as (\n\n    select\n        encode(sha256(cast(external_sample_id as bytea)), 'hex') as external_sample_hk,\n        encode(sha256(cast(sample_id as bytea)), 'hex') as sample_hk\n    from\n        cleaned\n    \n    except\n    select\n        external_sample_hk,\n        sample_hk\n    from\n        \"orcavault\".\"dcl\".\"link_internal_to_external_sample\"\n    \n\n),\n\ntransformed as (\n\n    select\n        external_sample_hk,\n        sample_hk,\n        cast('2025-03-28 10:30:16.299930+00:00' as timestamptz) as load_datetime,\n        (select 'lab') as record_source\n    from\n        differentiated\n\n),\n\nfinal as (\n\n    select\n        cast(encode(sha256(concat(external_sample_hk, sample_hk)::bytea), 'hex') as char(64)) as internal_external_sample_hk,\n        cast(external_sample_hk as char(64)) as external_sample_hk,\n        cast(sample_hk as char(64)) as sample_hk,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"dcl\".\"link_internal_to_external_sample\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-28T10:30:17.739446Z", "completed_at": "2025-03-28T10:30:17.749236Z"}, {"name": "execute", "started_at": "2025-03-28T10:30:17.749620Z", "completed_at": "2025-03-28T10:30:17.749623Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01169896125793457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.link_library_sample", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select library_id, sample_id from \"orcavault\".\"ods\".\"data_portal_limsrow\"\n    union\n    select library_id, sample_id from \"orcavault\".\"ods\".\"data_portal_labmetadata\"\n    union\n    select library_id, smp.sample_id as sample_id from \"orcavault\".\"ods\".\"metadata_manager_library\" as lib\n        join \"orcavault\".\"ods\".\"metadata_manager_sample\" as smp on lib.sample_orcabus_id = smp.orcabus_id\n    union\n    select library_id, sample_id from \"orcavault\".\"psa\".\"spreadsheet_library_tracking_metadata\"\n    union\n    select library_id, sample_id from \"orcavault\".\"psa\".\"spreadsheet_google_lims\"\n\n),\n\ncleaned as (\n\n    select\n        distinct library_id, sample_id\n    from\n        source\n    where\n        (library_id is not null and library_id <> '') and\n        (sample_id is not null and sample_id <> '')\n\n),\n\ndifferentiated as (\n\n    select\n        encode(sha256(cast(sample_id as bytea)), 'hex') as sample_hk,\n        encode(sha256(cast(library_id as bytea)), 'hex') as library_hk\n    from\n        cleaned\n    \n    except\n    select\n        sample_hk,\n        library_hk\n    from\n        \"orcavault\".\"dcl\".\"link_library_sample\"\n    \n\n),\n\ntransformed as (\n\n    select\n        sample_hk,\n        library_hk,\n        cast('2025-03-28 10:30:16.299930+00:00' as timestamptz) as load_datetime,\n        (select 'lab') as record_source\n    from\n        differentiated\n\n),\n\nfinal as (\n\n    select\n        cast(encode(sha256(concat(sample_hk, library_hk)::bytea), 'hex') as char(64)) as library_sample_hk,\n        cast(sample_hk as char(64)) as sample_hk,\n        cast(library_hk as char(64)) as library_hk,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"dcl\".\"link_library_sample\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-28T10:30:17.741707Z", "completed_at": "2025-03-28T10:30:17.749464Z"}, {"name": "execute", "started_at": "2025-03-28T10:30:17.749922Z", "completed_at": "2025-03-28T10:30:17.749925Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011551856994628906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.fastq", "compiled": true, "compiled_code": "\n\nwith transformed as (\n\n    select\n        sat.sequencing_run_id as sequencing_run_id,\n        cast((regexp_match(sat.sequencing_run_id, '(?:^)(\\d{6})(?:_A\\d{5}_\\d{4}_[A-Z0-9]{10})'))[1] as date) as sequencing_run_date,\n        sat.portal_run_id as portal_run_id,\n        hub.bucket as bucket,\n        hub.key as \"key\",\n        (regexp_match(sat.filename, '(?:L\\d{7}|L(?:PRJ|CCR|MDX|TGX)\\d{6}|Undetermined)(?:(?:_topup\\d?)|(?:_rerun\\d?))?'))[1] as library_id,\n        sat.filename as filename,\n        sat.ext1 as format,\n        cur.size as \"size\",\n        cur.storage_class as storage_class,\n        cur.e_tag as e_tag,\n        cur.last_modified_date as last_modified_date\n    from \"orcavault\".\"dcl\".\"hub_s3object\" hub\n        join \"orcavault\".\"dcl\".\"sat_s3object_by_run\" sat on sat.s3object_hk = hub.s3object_hk\n        join \"orcavault\".\"dcl\".\"sat_s3object_current\" cur on cur.s3object_hk = hub.s3object_hk\n    where\n        (sat.ext1 = 'gz' or sat.ext1 = 'ora')\n        and sat.ext2 = 'fastq'\n        and cur.is_current = 1\n        and cur.is_deleted = 0\n\n),\n\nfinal as (\n\n    select\n        cast(sequencing_run_id as varchar(255)) as sequencing_run_id,\n        cast(sequencing_run_date as date) as sequencing_run_date,\n        cast(portal_run_id as varchar(255)) as portal_run_id,\n        cast(bucket as varchar(255)) as bucket,\n        cast(\"key\" as text) as \"key\",\n        cast(library_id as varchar(255)) as library_id,\n        cast(filename as text) as filename,\n        cast(format as varchar(255)) as format,\n        cast(\"size\" as bigint) as \"size\",\n        cast(storage_class as varchar(255)) as storage_class,\n        cast(e_tag as varchar(255)) as e_tag,\n        cast(last_modified_date as timestamptz) as last_modified_date\n    from\n        transformed\n    order by sequencing_run_date desc nulls last, library_id desc\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"mart\".\"fastq\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-28T10:30:17.744959Z", "completed_at": "2025-03-28T10:30:17.750374Z"}, {"name": "execute", "started_at": "2025-03-28T10:30:17.751069Z", "completed_at": "2025-03-28T10:30:17.751071Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.00957798957824707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.effsat_library_experiment", "compiled": true, "compiled_code": "\n\nwith incremental as (\n\n    select\n        hl.library_hk as library_hk,\n        hl.library_id as library_id,\n        he.experiment_id as experiment_id,\n        lnk.library_experiment_hk as library_experiment_hk,\n        lnk.record_source as record_source,\n        cast(he.last_seen_datetime as timestamptz) as experiment_last_seen_datetime,\n        row_number() over (partition by hl.library_hk order by he.last_seen_datetime desc) as rank\n    from \"orcavault\".\"dcl\".\"hub_library\" hl\n        join \"orcavault\".\"dcl\".\"link_library_experiment\" lnk on lnk.library_hk = hl.library_hk\n        join \"orcavault\".\"dcl\".\"hub_experiment\" he on he.experiment_hk = lnk.experiment_hk\n    \n    where\n        cast(lnk.load_datetime as timestamptz) > ( select coalesce(max(load_datetime), '1900-01-01') as ldts from \"orcavault\".\"dcl\".\"effsat_library_experiment\" )\n    \n\n),\n\ntransformed as (\n\n    select\n        library_experiment_hk,\n        cast('2025-03-28 10:30:16.299930+00:00' as timestamptz) as load_datetime,\n        record_source,\n        encode(sha256(concat(\n            library_id,\n            experiment_id\n        )::bytea), 'hex') as hash_diff,\n        library_id,\n        experiment_id,\n        cast(experiment_last_seen_datetime as timestamptz) as effective_from,\n        case\n            when (rank = 1) then\n                cast('9999-12-31' as date)\n            else\n                lag(experiment_last_seen_datetime) over (partition by library_hk order by rank)\n            end as effective_to,\n        case when (rank = 1) then 1 else 0 end as is_current\n    from\n        incremental\n\n),\n\nfinal as (\n\n    select\n        cast(library_experiment_hk as varchar(64)) as library_experiment_hk,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source,\n        cast(hash_diff as varchar(64)) as hash_diff,\n        cast(library_id as varchar(255)) as library_id,\n        cast(experiment_id as varchar(255)) as experiment_id,\n        cast(effective_from as timestamptz) as effective_from,\n        cast(effective_to as timestamptz) as effective_to,\n        cast(is_current as smallint) as is_current\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"dcl\".\"effsat_library_experiment\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-28T10:30:17.747695Z", "completed_at": "2025-03-28T10:30:17.750701Z"}, {"name": "execute", "started_at": "2025-03-28T10:30:17.751508Z", "completed_at": "2025-03-28T10:30:17.751510Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.007172822952270508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.sat_library_sequencing_run_glims", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select\n        illumina_id as sequencing_run_id,\n        library_id,\n        record_source,\n        cast(\"timestamp\" as date) as \"timestamp\",\n        run,\n        override_cycles,\n        secondary_analysis,\n        number_fastqs,\n        fastq,\n        results,\n        notes,\n        trello\n    from\n        \"orcavault\".\"psa\".\"spreadsheet_google_lims\"\n\n),\n\ncleaned as (\n\n    select\n        row_number() over (partition by library_id, \"timestamp\" order by \"timestamp\" desc, sequencing_run_id desc) as rank,\n        sequencing_run_id,\n        trim(regexp_replace(library_id, E'[\\\\n\\\\r]+', '', 'g')) as library_id,\n        record_source,\n        \"timestamp\",\n        run,\n        trim(regexp_replace(override_cycles, E'[\\\\n\\\\r]+', '', 'g')) as override_cycles,\n        trim(regexp_replace(secondary_analysis, E'[\\\\n\\\\r]+', '', 'g')) as secondary_analysis,\n        trim(regexp_replace(number_fastqs, E'[\\\\n\\\\r]+', '', 'g')) as number_fastqs,\n        trim(regexp_replace(fastq, E'[\\\\n\\\\r]+', '', 'g')) as fastq,\n        trim(regexp_replace(results, E'[\\\\n\\\\r]+', '', 'g')) as results,\n        trim(regexp_replace(notes, E'[\\\\n\\\\r]+', '', 'g')) as notes,\n        trim(regexp_replace(trello, E'[\\\\n\\\\r]+', '', 'g')) as trello\n    from\n        source\n    where\n        (library_id is not null or library_id <> '') and\n        (sequencing_run_id is not null or sequencing_run_id <> '')\n\n),\n\ndifferentiated as (\n\n    select\n        *\n    from\n        cleaned\n    where\n        rank = 1\n    \n        and cast(\"timestamp\" as timestamptz) + time '11:00' > ( select coalesce(max(load_datetime), '1900-01-01') as ldts from \"orcavault\".\"dcl\".\"sat_library_sequencing_run_glims\" )\n    \n\n),\n\nencoded as (\n\n    select\n        encode(sha256(cast(sequencing_run_id as bytea)), 'hex') as sequencing_run_hk,\n        encode(sha256(cast(library_id as bytea)), 'hex') as library_hk,\n        record_source,\n        encode(sha256(concat(\"timestamp\", run, override_cycles, secondary_analysis, number_fastqs, fastq, results, notes, trello)::bytea), 'hex') as hash_diff,\n        \"timestamp\",\n        run,\n        override_cycles,\n        secondary_analysis,\n        number_fastqs,\n        fastq,\n        results,\n        notes,\n        trello\n    from\n        differentiated\n\n),\n\ntransformed as (\n\n    select\n        encode(sha256(concat(sequencing_run_hk, library_hk)::bytea), 'hex') as library_sequencing_run_hk,\n        cast(\"timestamp\" as timestamptz) + time '11:00' as load_datetime,\n        record_source,\n        hash_diff,\n        \"timestamp\",\n        run,\n        override_cycles,\n        secondary_analysis,\n        number_fastqs,\n        fastq,\n        results,\n        notes,\n        trello\n    from\n        encoded\n\n),\n\nfinal as (\n\n    select\n        cast(library_sequencing_run_hk as char(64)) as library_sequencing_run_hk,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source,\n        cast(hash_diff as char(64)) as hash_diff,\n        cast(\"timestamp\" as date) as \"timestamp\",\n        cast(run as integer) as run,\n        cast(override_cycles as varchar(255)) as override_cycles,\n        cast(secondary_analysis as varchar(255)) as secondary_analysis,\n        cast(number_fastqs as varchar(255)) as number_fastqs,\n        cast(fastq as text) as fastq,\n        cast(results as text) as results,\n        cast(notes as text) as notes,\n        cast(trello as text) as trello\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"dcl\".\"sat_library_sequencing_run_glims\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-28T10:30:17.754393Z", "completed_at": "2025-03-28T10:30:17.765770Z"}, {"name": "execute", "started_at": "2025-03-28T10:30:17.765942Z", "completed_at": "2025-03-28T10:30:17.765945Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014658212661743164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.sat_library_sequencing_run_srm", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select\n        seq.instrument_run_id as sequencing_run_id,\n        assoc.library_id as library_id,\n        assoc.orcabus_id as orcabus_id,\n        assoc.association_date as association_date,\n        assoc.status as status\n    from \"orcavault\".\"ods\".\"sequence_run_manager_sequence\" seq\n        join \"orcavault\".\"ods\".\"sequence_run_manager_libraryassociation\" assoc on assoc.sequence_id = seq.orcabus_id\n    \n    where\n        cast(assoc.association_date as timestamptz) > ( select coalesce(max(load_datetime), '1900-01-01') as ldts from \"orcavault\".\"dcl\".\"sat_library_sequencing_run_srm\" )\n    \n\n),\n\ntransformed as (\n\n    select\n        encode(sha256(cast(sequencing_run_id as bytea)), 'hex') as sequencing_run_hk,\n        encode(sha256(cast(library_id as bytea)), 'hex') as library_hk,\n        cast('2025-03-28 10:30:16.299930+00:00' as timestamptz) as load_datetime,\n        (select 'sequence_run_manager_libraryassociation') as record_source,\n        encode(sha256(concat(\n            orcabus_id,\n            association_date,\n            status\n        )::bytea), 'hex') as hash_diff,\n        orcabus_id,\n        association_date,\n        status\n    from\n        source\n\n),\n\nfinal as (\n\n    select\n        cast(encode(sha256(concat(sequencing_run_hk, library_hk)::bytea), 'hex') as char(64)) as library_sequencing_run_hk,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source,\n        cast(hash_diff as char(64)) as hash_diff,\n        cast(orcabus_id as char(26)) as orcabus_id,\n        cast(association_date as timestamptz) as association_date,\n        cast(status as varchar(255)) as status\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"dcl\".\"sat_library_sequencing_run_srm\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-28T10:30:17.752380Z", "completed_at": "2025-03-28T10:30:17.766238Z"}, {"name": "execute", "started_at": "2025-03-28T10:30:17.766448Z", "completed_at": "2025-03-28T10:30:17.766450Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.015605926513671875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.sat_library_sequencing_run_plims", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select\n        illumina_id as sequencing_run_id,\n        library_id,\n        cast(\"timestamp\" as date) as \"timestamp\",\n        run,\n        override_cycles,\n        secondary_analysis,\n        number_fastqs,\n        fastq,\n        results,\n        notes,\n        trello\n    from\n        \"orcavault\".\"ods\".\"data_portal_limsrow\"\n\n),\n\ncleaned as (\n\n    select\n        sequencing_run_id,\n        trim(regexp_replace(library_id, E'[\\\\n\\\\r]+', '', 'g')) as library_id,\n        \"timestamp\",\n        run,\n        trim(regexp_replace(override_cycles, E'[\\\\n\\\\r]+', '', 'g')) as override_cycles,\n        trim(regexp_replace(secondary_analysis, E'[\\\\n\\\\r]+', '', 'g')) as secondary_analysis,\n        trim(regexp_replace(number_fastqs, E'[\\\\n\\\\r]+', '', 'g')) as number_fastqs,\n        trim(regexp_replace(fastq, E'[\\\\n\\\\r]+', '', 'g')) as fastq,\n        trim(regexp_replace(results, E'[\\\\n\\\\r]+', '', 'g')) as results,\n        trim(regexp_replace(notes, E'[\\\\n\\\\r]+', '', 'g')) as notes,\n        trim(regexp_replace(trello, E'[\\\\n\\\\r]+', '', 'g')) as trello\n    from\n        source\n\n),\n\ndifferentiated as (\n\n    select\n        *\n    from\n        cleaned\n    \n    where\n        cast(\"timestamp\" as timestamptz) + time '11:00' > ( select coalesce(max(load_datetime), '1900-01-01') as ldts from \"orcavault\".\"dcl\".\"sat_library_sequencing_run_plims\" )\n    \n\n),\n\nencoded as (\n\n    select\n        encode(sha256(cast(sequencing_run_id as bytea)), 'hex') as sequencing_run_hk,\n        encode(sha256(cast(library_id as bytea)), 'hex') as library_hk,\n        encode(sha256(concat(\"timestamp\", run, override_cycles, secondary_analysis, number_fastqs, fastq, results, notes, trello)::bytea), 'hex') as hash_diff,\n        \"timestamp\",\n        run,\n        override_cycles,\n        secondary_analysis,\n        number_fastqs,\n        fastq,\n        results,\n        notes,\n        trello\n    from\n        differentiated\n\n),\n\ntransformed as (\n\n    select\n        encode(sha256(concat(sequencing_run_hk, library_hk)::bytea), 'hex') as library_sequencing_run_hk,\n        cast(\"timestamp\" as timestamptz) + time '11:00' as load_datetime,\n        (select 'data_portal_limsrow') as record_source,\n        hash_diff,\n        \"timestamp\",\n        run,\n        override_cycles,\n        secondary_analysis,\n        number_fastqs,\n        fastq,\n        results,\n        notes,\n        trello\n    from\n        encoded\n\n),\n\nfinal as (\n\n    select\n        cast(library_sequencing_run_hk as char(64)) as library_sequencing_run_hk,\n        cast(load_datetime as timestamptz) as load_datetime,\n        cast(record_source as varchar(255)) as record_source,\n        cast(hash_diff as char(64)) as hash_diff,\n        cast(\"timestamp\" as date) as \"timestamp\",\n        cast(run as integer) as run,\n        cast(override_cycles as varchar(255)) as override_cycles,\n        cast(secondary_analysis as varchar(255)) as secondary_analysis,\n        cast(number_fastqs as varchar(255)) as number_fastqs,\n        cast(fastq as text) as fastq,\n        cast(results as text) as results,\n        cast(notes as text) as notes,\n        cast(trello as text) as trello\n    from\n        transformed\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"dcl\".\"sat_library_sequencing_run_plims\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-28T10:30:17.761301Z", "completed_at": "2025-03-28T10:30:17.766716Z"}, {"name": "execute", "started_at": "2025-03-28T10:30:17.766902Z", "completed_at": "2025-03-28T10:30:17.766905Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01096200942993164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.lims", "compiled": true, "compiled_code": "\n\nwith effective_link_library_experiment as (\n\n    select\n        lnk.*\n    from \"orcavault\".\"dcl\".\"link_library_experiment\" lnk\n        join \"orcavault\".\"dcl\".\"effsat_library_experiment\" effsat on effsat.library_experiment_hk = lnk.library_experiment_hk\n    where\n        effsat.is_current = 1\n\n),\n\ntransformed as (\n\n    select\n\n        sqr.sequencing_run_id as sequencing_run_id,\n        cast((regexp_match(sqr.sequencing_run_id, '(?:^)(\\d{6})(?:_A\\d{5}_\\d{4}_[A-Z0-9]{10})'))[1] as date) as sequencing_run_date,\n        lib.library_id as library_id,\n        int_sbj.internal_subject_id as internal_subject_id,\n        ext_sbj.external_subject_id as external_subject_id,\n        smp.sample_id as sample_id,\n        ext_smp.external_sample_id as external_sample_id,\n        expr.experiment_id as experiment_id,\n        prj.project_id as project_id,\n        owner.owner_id as owner_id,\n        sat.workflow as workflow,\n        sat.phenotype as phenotype,\n        sat.type as type,\n        sat.assay as assay,\n        sat.quality as quality,\n        sat.source as source,\n        sat.truseq_index as truseq_index,\n        sat.load_datetime as load_datetime\n\n    from\n\n        \"orcavault\".\"dcl\".\"hub_library\" lib\n\n            left join \"orcavault\".\"dcl\".\"link_library_sequencing_run\" lnk1 on lib.library_hk = lnk1.library_hk\n            left join \"orcavault\".\"dcl\".\"hub_sequencing_run\" sqr on lnk1.sequencing_run_hk = sqr.sequencing_run_hk\n\n            left join \"orcavault\".\"dcl\".\"link_library_internal_subject\" lnk2 on lib.library_hk = lnk2.library_hk\n            left join \"orcavault\".\"dcl\".\"hub_internal_subject\" int_sbj on lnk2.internal_subject_hk = int_sbj.internal_subject_hk\n\n            left join \"orcavault\".\"dcl\".\"link_library_external_subject\" lnk3 on lib.library_hk = lnk3.library_hk\n            left join \"orcavault\".\"dcl\".\"hub_external_subject\" ext_sbj on lnk3.external_subject_hk = ext_sbj.external_subject_hk\n\n            left join \"orcavault\".\"dcl\".\"link_library_sample\" lnk4 on lib.library_hk = lnk4.library_hk\n            left join \"orcavault\".\"dcl\".\"hub_sample\" smp on lnk4.sample_hk = smp.sample_hk\n\n            left join \"orcavault\".\"dcl\".\"link_library_external_sample\" lnk5 on lib.library_hk = lnk5.library_hk\n            left join \"orcavault\".\"dcl\".\"hub_external_sample\" ext_smp on lnk5.external_sample_hk = ext_smp.external_sample_hk\n\n            left join effective_link_library_experiment lnk6 on lib.library_hk = lnk6.library_hk\n            left join \"orcavault\".\"dcl\".\"hub_experiment\" expr on lnk6.experiment_hk = expr.experiment_hk\n\n            left join \"orcavault\".\"dcl\".\"link_library_project\" lnk7 on lib.library_hk = lnk7.library_hk\n            left join \"orcavault\".\"dcl\".\"hub_project\" prj on lnk7.project_hk = prj.project_hk\n\n            left join \"orcavault\".\"dcl\".\"link_library_ownership\" lnk8 on lib.library_hk = lnk8.library_hk\n            left join \"orcavault\".\"dcl\".\"hub_owner\" owner on lnk8.owner_hk = owner.owner_hk\n\n            left join \"orcavault\".\"dcl\".\"sat_library_glab\" sat on lib.library_hk = sat.library_hk\n\n),\n\nfinal as (\n\n    select\n        cast(sequencing_run_id as varchar(255)) as sequencing_run_id,\n        cast(sequencing_run_date as date) as sequencing_run_date,\n        cast(library_id as varchar(255)) as library_id,\n        cast(internal_subject_id as varchar(255)) as internal_subject_id,\n        cast(external_subject_id as varchar(255)) as external_subject_id,\n        cast(sample_id as varchar(255)) as sample_id,\n        cast(external_sample_id as varchar(255)) as external_sample_id,\n        cast(experiment_id as varchar(255)) as experiment_id,\n        cast(project_id as varchar(255)) as project_id,\n        cast(owner_id as varchar(255)) as owner_id,\n        cast(workflow as varchar(255)) as workflow,\n        cast(phenotype as varchar(255)) as phenotype,\n        cast(type as varchar(255)) as type,\n        cast(assay as varchar(255)) as assay,\n        cast(quality as varchar(255)) as quality,\n        cast(source as varchar(255)) as source,\n        cast(truseq_index as varchar(255)) as truseq_index,\n        cast(load_datetime as timestamptz) as load_datetime\n    from\n        transformed\n    where\n        sequencing_run_id is not null\n    order by sequencing_run_date desc nulls last, library_id desc\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"mart\".\"lims\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-28T10:30:17.756511Z", "completed_at": "2025-03-28T10:30:17.767161Z"}, {"name": "execute", "started_at": "2025-03-28T10:30:17.767366Z", "completed_at": "2025-03-28T10:30:17.767368Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.013180017471313477, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.grimmond_lims", "compiled": true, "compiled_code": "\n\nwith transformed as (\n\n    select\n\n        sqr.sequencing_run_id as sequencing_run_id,\n        cast((regexp_match(sqr.sequencing_run_id, '(?:^)(\\d{6})(?:_A\\d{5}_\\d{4}_[A-Z0-9]{10})'))[1] as date) as sequencing_run_date,\n        lib.library_id as library_id,\n        int_sbj.internal_subject_id as internal_subject_id,\n        ext_sbj.external_subject_id as external_subject_id,\n        smp.sample_id as sample_id,\n        ext_smp.external_sample_id as external_sample_id,\n        expr.experiment_id as experiment_id,\n        prj.project_id as project_id,\n        owner.owner_id as owner_id,\n        coalesce(sat.workflow, sat2.workflow) as workflow,\n        coalesce(sat.phenotype, sat2.phenotype) as phenotype,\n        coalesce(sat.type, sat2.type) as type,\n        coalesce(sat.assay, sat2.assay) as assay,\n        coalesce(sat.quality, sat2.quality) as quality,\n        sat.source as source,\n        sat.truseq_index as truseq_index,\n        coalesce(sat.load_datetime, sat2.load_datetime) as load_datetime\n\n    from\n\n        \"orcavault\".\"dcl\".\"hub_library\" lib\n\n            left join \"orcavault\".\"dcl\".\"link_library_sequencing_run\" lnk1 on lib.library_hk = lnk1.library_hk\n            left join \"orcavault\".\"dcl\".\"hub_sequencing_run\" sqr on lnk1.sequencing_run_hk = sqr.sequencing_run_hk\n\n            left join \"orcavault\".\"dcl\".\"link_library_internal_subject\" lnk2 on lib.library_hk = lnk2.library_hk\n            left join \"orcavault\".\"dcl\".\"hub_internal_subject\" int_sbj on lnk2.internal_subject_hk = int_sbj.internal_subject_hk\n\n            left join \"orcavault\".\"dcl\".\"link_library_external_subject\" lnk3 on lib.library_hk = lnk3.library_hk\n            left join \"orcavault\".\"dcl\".\"hub_external_subject\" ext_sbj on lnk3.external_subject_hk = ext_sbj.external_subject_hk\n\n            left join \"orcavault\".\"dcl\".\"link_library_sample\" lnk4 on lib.library_hk = lnk4.library_hk\n            left join \"orcavault\".\"dcl\".\"hub_sample\" smp on lnk4.sample_hk = smp.sample_hk\n\n            left join \"orcavault\".\"dcl\".\"link_library_external_sample\" lnk5 on lib.library_hk = lnk5.library_hk\n            left join \"orcavault\".\"dcl\".\"hub_external_sample\" ext_smp on lnk5.external_sample_hk = ext_smp.external_sample_hk\n\n            left join \"orcavault\".\"dcl\".\"link_library_experiment\" lnk6 on lib.library_hk = lnk6.library_hk\n            left join \"orcavault\".\"dcl\".\"hub_experiment\" expr on lnk6.experiment_hk = expr.experiment_hk\n\n            left join \"orcavault\".\"dcl\".\"link_library_project\" lnk7 on lib.library_hk = lnk7.library_hk\n            left join \"orcavault\".\"dcl\".\"hub_project\" prj on lnk7.project_hk = prj.project_hk\n\n            left join \"orcavault\".\"dcl\".\"link_library_ownership\" lnk8 on lib.library_hk = lnk8.library_hk\n            left join \"orcavault\".\"dcl\".\"hub_owner\" owner on lnk8.owner_hk = owner.owner_hk\n\n            left join \"orcavault\".\"dcl\".\"sat_library_glab\" sat on lib.library_hk = sat.library_hk\n            left join \"orcavault\".\"dcl\".\"sat_library_mm\" sat2 on lib.library_hk = sat2.library_hk\n\n),\n\nfiltered as (\n\n    select\n        *\n    from\n        transformed\n    where\n        project_id in ('PDAC-HMF')\n        or\n        (\n            owner_id = 'Grimmond'\n            and project_id in (\n                select\n                    distinct prj.project_id\n                from\n                    \"orcavault\".\"dcl\".\"hub_project\" prj\n                        join \"orcavault\".\"dcl\".\"link_project_ownership\" lnk on prj.project_hk = lnk.project_hk\n                        join \"orcavault\".\"dcl\".\"hub_owner\" owner on lnk.owner_hk = owner.owner_hk\n                where\n                    owner.owner_id = 'Grimmond'\n            )\n        )\n\n),\n\nfinal as (\n\n    select\n        cast(sequencing_run_id as varchar(255)) as sequencing_run_id,\n        cast(sequencing_run_date as date) as sequencing_run_date,\n        cast(library_id as varchar(255)) as library_id,\n        cast(internal_subject_id as varchar(255)) as internal_subject_id,\n        cast(external_subject_id as varchar(255)) as external_subject_id,\n        cast(sample_id as varchar(255)) as sample_id,\n        cast(external_sample_id as varchar(255)) as external_sample_id,\n        cast(experiment_id as varchar(255)) as experiment_id,\n        cast(project_id as varchar(255)) as project_id,\n        cast(owner_id as varchar(255)) as owner_id,\n        cast(workflow as varchar(255)) as workflow,\n        cast(phenotype as varchar(255)) as phenotype,\n        cast(type as varchar(255)) as type,\n        cast(assay as varchar(255)) as assay,\n        cast(quality as varchar(255)) as quality,\n        cast(source as varchar(255)) as source,\n        cast(truseq_index as varchar(255)) as truseq_index,\n        cast(load_datetime as timestamptz) as load_datetime\n    from\n        filtered\n    order by sequencing_run_date desc nulls last, library_id desc\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"mart\".\"grimmond_lims\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-28T10:30:17.774917Z", "completed_at": "2025-03-28T10:30:17.778191Z"}, {"name": "execute", "started_at": "2025-03-28T10:30:17.778662Z", "completed_at": "2025-03-28T10:30:17.778665Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.010300159454345703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.tothill_lims", "compiled": true, "compiled_code": "\n\nwith transformed as (\n\n    select\n        *\n    from\n        \"orcavault\".\"mart\".\"lims\"\n    where\n        owner_id = 'Tothill'\n        and project_id in (\n            select\n                distinct prj.project_id\n            from\n                \"orcavault\".\"dcl\".\"hub_project\" prj\n                    join \"orcavault\".\"dcl\".\"link_project_ownership\" lnk on prj.project_hk = lnk.project_hk\n                    join \"orcavault\".\"dcl\".\"hub_owner\" owner on lnk.owner_hk = owner.owner_hk\n            where\n                owner.owner_id = 'Tothill'\n        )\n\n),\n\nfinal as (\n\n    select\n        cast(sequencing_run_id as varchar(255)) as sequencing_run_id,\n        cast(sequencing_run_date as date) as sequencing_run_date,\n        cast(library_id as varchar(255)) as library_id,\n        cast(internal_subject_id as varchar(255)) as internal_subject_id,\n        cast(external_subject_id as varchar(255)) as external_subject_id,\n        cast(sample_id as varchar(255)) as sample_id,\n        cast(external_sample_id as varchar(255)) as external_sample_id,\n        cast(experiment_id as varchar(255)) as experiment_id,\n        cast(project_id as varchar(255)) as project_id,\n        cast(owner_id as varchar(255)) as owner_id,\n        cast(workflow as varchar(255)) as workflow,\n        cast(phenotype as varchar(255)) as phenotype,\n        cast(type as varchar(255)) as type,\n        cast(assay as varchar(255)) as assay,\n        cast(quality as varchar(255)) as quality,\n        cast(source as varchar(255)) as source,\n        cast(truseq_index as varchar(255)) as truseq_index,\n        cast(load_datetime as timestamptz) as load_datetime\n    from\n        transformed\n    order by sequencing_run_date desc nulls last, library_id desc\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"mart\".\"tothill_lims\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-28T10:30:17.768957Z", "completed_at": "2025-03-28T10:30:17.778346Z"}, {"name": "execute", "started_at": "2025-03-28T10:30:17.778907Z", "completed_at": "2025-03-28T10:30:17.778909Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010860919952392578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.dawson_lims", "compiled": true, "compiled_code": "\n\nwith transformed as (\n\n    select\n        *\n    from\n        \"orcavault\".\"mart\".\"lims\"\n    where\n        owner_id = 'Dawson'\n        and project_id in (\n            select\n                distinct prj.project_id\n            from\n                \"orcavault\".\"dcl\".\"hub_project\" prj\n                    join \"orcavault\".\"dcl\".\"link_project_ownership\" lnk on prj.project_hk = lnk.project_hk\n                    join \"orcavault\".\"dcl\".\"hub_owner\" owner on lnk.owner_hk = owner.owner_hk\n            where\n                owner.owner_id = 'Dawson'\n        )\n\n),\n\nfinal as (\n\n    select\n        cast(sequencing_run_id as varchar(255)) as sequencing_run_id,\n        cast(sequencing_run_date as date) as sequencing_run_date,\n        cast(library_id as varchar(255)) as library_id,\n        cast(internal_subject_id as varchar(255)) as internal_subject_id,\n        cast(external_subject_id as varchar(255)) as external_subject_id,\n        cast(sample_id as varchar(255)) as sample_id,\n        cast(external_sample_id as varchar(255)) as external_sample_id,\n        cast(experiment_id as varchar(255)) as experiment_id,\n        cast(project_id as varchar(255)) as project_id,\n        cast(owner_id as varchar(255)) as owner_id,\n        cast(workflow as varchar(255)) as workflow,\n        cast(phenotype as varchar(255)) as phenotype,\n        cast(type as varchar(255)) as type,\n        cast(assay as varchar(255)) as assay,\n        cast(quality as varchar(255)) as quality,\n        cast(source as varchar(255)) as source,\n        cast(truseq_index as varchar(255)) as truseq_index,\n        cast(load_datetime as timestamptz) as load_datetime\n    from\n        transformed\n    order by sequencing_run_date desc nulls last, library_id desc\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"mart\".\"dawson_lims\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-28T10:30:17.772132Z", "completed_at": "2025-03-28T10:30:17.778499Z"}, {"name": "execute", "started_at": "2025-03-28T10:30:17.779161Z", "completed_at": "2025-03-28T10:30:17.779163Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01094508171081543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.curation_lims", "compiled": true, "compiled_code": "\n\nwith transformed as (\n\n    select\n        *\n    from\n        \"orcavault\".\"mart\".\"lims\"\n    where\n        sequencing_run_id is not null\n        and type is not null\n        and type not in ('10X', 'BiModal', 'exome', 'Exome', 'MeDIP', 'Metagenm', 'MethylSeq')\n        and assay is not null\n        and assay not like '%10X%'\n        and assay not in ('BM-5L', 'BM-6L', 'CRISPR', 'MeDIP', 'Takara')\n        and workflow in ('research', 'clinical', 'control', 'manual')\n),\n\nfinal as (\n\n    select\n        cast(sequencing_run_id as varchar(255)) as sequencing_run_id,\n        cast(sequencing_run_date as date) as sequencing_run_date,\n        cast(library_id as varchar(255)) as library_id,\n        cast(internal_subject_id as varchar(255)) as internal_subject_id,\n        cast(external_subject_id as varchar(255)) as external_subject_id,\n        cast(sample_id as varchar(255)) as sample_id,\n        cast(external_sample_id as varchar(255)) as external_sample_id,\n        cast(experiment_id as varchar(255)) as experiment_id,\n        cast(project_id as varchar(255)) as project_id,\n        cast(owner_id as varchar(255)) as owner_id,\n        cast(workflow as varchar(255)) as workflow,\n        cast(phenotype as varchar(255)) as phenotype,\n        cast(type as varchar(255)) as type,\n        cast(assay as varchar(255)) as assay,\n        cast(quality as varchar(255)) as quality,\n        cast(source as varchar(255)) as source,\n        cast(truseq_index as varchar(255)) as truseq_index,\n        cast(load_datetime as timestamptz) as load_datetime\n    from\n        transformed\n    order by sequencing_run_date desc nulls last, library_id desc\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"mart\".\"curation_lims\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-28T10:30:17.780398Z", "completed_at": "2025-03-28T10:30:17.785423Z"}, {"name": "execute", "started_at": "2025-03-28T10:30:17.785751Z", "completed_at": "2025-03-28T10:30:17.785754Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0059850215911865234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.dawson_fastq", "compiled": true, "compiled_code": "\n\nwith transformed as (\n\n    select\n        lims.sequencing_run_id as sequencing_run_id,\n        fq.sequencing_run_date as sequencing_run_date,\n        fq.portal_run_id,\n        fq.bucket as bucket,\n        fq.key as \"key\",\n        lims.library_id as library_id,\n        fq.filename as filename,\n        fq.format as format,\n        fq.size as \"size\",\n        fq.storage_class as storage_class,\n        fq.e_tag as e_tag,\n        fq.last_modified_date as last_modified_date\n    from \"orcavault\".\"mart\".\"fastq\" fq\n        join \"orcavault\".\"mart\".\"dawson_lims\" lims on lims.library_id = fq.library_id and lims.sequencing_run_id = fq.sequencing_run_id\n\n),\n\nfinal as (\n\n    select\n        cast(sequencing_run_id as varchar(255)) as sequencing_run_id,\n        cast(sequencing_run_date as date) as sequencing_run_date,\n        cast(portal_run_id as varchar(255)) as portal_run_id,\n        cast(bucket as varchar(255)) as bucket,\n        cast(\"key\" as text) as \"key\",\n        cast(library_id as varchar(255)) as library_id,\n        cast(filename as text) as filename,\n        cast(format as varchar(255)) as format,\n        cast(\"size\" as bigint) as \"size\",\n        cast(storage_class as varchar(255)) as storage_class,\n        cast(e_tag as varchar(255)) as e_tag,\n        cast(last_modified_date as timestamptz) as last_modified_date\n    from\n        transformed\n    order by sequencing_run_date desc nulls last, library_id desc\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"mart\".\"dawson_fastq\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-28T10:30:17.782776Z", "completed_at": "2025-03-28T10:30:17.785592Z"}, {"name": "execute", "started_at": "2025-03-28T10:30:17.786010Z", "completed_at": "2025-03-28T10:30:17.786013Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.006083011627197266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.orcavault.tothill_fastq", "compiled": true, "compiled_code": "\n\nwith transformed as (\n\n    select\n        lims.sequencing_run_id as sequencing_run_id,\n        fq.sequencing_run_date as sequencing_run_date,\n        fq.portal_run_id,\n        fq.bucket as bucket,\n        fq.key as \"key\",\n        lims.library_id as library_id,\n        fq.filename as filename,\n        fq.format as format,\n        fq.size as \"size\",\n        fq.storage_class as storage_class,\n        fq.e_tag as e_tag,\n        fq.last_modified_date as last_modified_date\n    from \"orcavault\".\"mart\".\"fastq\" fq\n        join \"orcavault\".\"mart\".\"tothill_lims\" lims on lims.library_id = fq.library_id and lims.sequencing_run_id = fq.sequencing_run_id\n\n),\n\nfinal as (\n\n    select\n        cast(sequencing_run_id as varchar(255)) as sequencing_run_id,\n        cast(sequencing_run_date as date) as sequencing_run_date,\n        cast(portal_run_id as varchar(255)) as portal_run_id,\n        cast(bucket as varchar(255)) as bucket,\n        cast(\"key\" as text) as \"key\",\n        cast(library_id as varchar(255)) as library_id,\n        cast(filename as text) as filename,\n        cast(format as varchar(255)) as format,\n        cast(\"size\" as bigint) as \"size\",\n        cast(storage_class as varchar(255)) as storage_class,\n        cast(e_tag as varchar(255)) as e_tag,\n        cast(last_modified_date as timestamptz) as last_modified_date\n    from\n        transformed\n    order by sequencing_run_date desc nulls last, library_id desc\n\n)\n\nselect * from final", "relation_name": "\"orcavault\".\"mart\".\"tothill_fastq\"", "batch_results": null}], "elapsed_time": 0.39120912551879883, "args": {"populate_cache": true, "static": false, "use_colors": true, "defer": false, "introspect": true, "macro_debugging": false, "invocation_command": "dbt docs generate", "log_path": "/Users/sklin/Projects/umccr/warehouse/orcahouse/orcavault/logs", "compile": true, "empty_catalog": false, "printer_width": 80, "warn_error_options": {"include": [], "exclude": []}, "log_level_file": "debug", "log_file_max_bytes": 10485760, "require_nested_cumulative_type_params": false, "source_freshness_run_project_hooks": false, "print": true, "project_dir": "/Users/sklin/Projects/umccr/warehouse/orcahouse/orcavault", "require_resource_names_without_spaces": false, "log_level": "info", "require_yaml_configuration_for_mf_time_spines": false, "write_json": true, "log_format": "default", "indirect_selection": "eager", "show_resource_report": false, "quiet": false, "skip_nodes_if_on_run_start_fails": false, "which": "generate", "send_anonymous_usage_stats": true, "use_colors_file": true, "partial_parse_file_diff": true, "partial_parse": true, "cache_selected_only": false, "select": [], "version_check": true, "static_parser": true, "exclude": [], "state_modified_compare_vars": false, "require_batched_execution_for_custom_microbatch_strategy": false, "require_explicit_package_overrides_for_builtin_materializations": true, "vars": {}, "log_format_file": "debug", "state_modified_compare_more_unrendered_values": false, "profiles_dir": "/Users/sklin/Projects/umccr/warehouse/orcahouse/orcavault", "favor_state": false, "strict_mode": false}}